{"version":3,"file":"bundle.min.js","mappings":"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","sources":["webpack://e-wallet_app/webpack/bootstrap","webpack://e-wallet_app/webpack/runtime/define property getters","webpack://e-wallet_app/webpack/runtime/hasOwnProperty shorthand","webpack://e-wallet_app/./src/js/panel/transaction_panel.js","webpack://e-wallet_app/./src/js/utils/input_name.js","webpack://e-wallet_app/./src/js/panel/form_validation.js","webpack://e-wallet_app/./src/js/utils/category.js","webpack://e-wallet_app/./src/js/utils/money.js","webpack://e-wallet_app/./src/js/utils/balance.js","webpack://e-wallet_app/./src/js/data/transactions.js","webpack://e-wallet_app/./src/js/modal/modal.js","webpack://e-wallet_app/./src/js/main.js","webpack://e-wallet_app/./src/js/utils/color_mode.js","webpack://e-wallet_app/./src/js/footer.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import {transactionPanel, editionPanel, nameInput, nameToEditInput, amountInput, amountToEditInput, categorySelect, categoryToEditSelect} from \"../main.js\";\r\nimport {createNewTransaction, editTransaction} from \"../data/transactions.js\";\r\n\r\nexport const openTransactionPanel = () => {\r\n  // Group the inputs into an array\r\n  const inputs = [nameInput, amountInput, categorySelect];\r\n  // Show the transaction panel\r\n  transactionPanel.classList.add(\"transaction-panel--open\");\r\n  // Put focus on the name input\r\n  transactionPanel.querySelector(\".transaction-panel__input--name\").focus();\r\n  // Add event listeners on the `Save` and `Cancel` buttons\r\n  transactionPanel.querySelector(\".transaction-panel__button--save\").addEventListener(\"click\", (event) => createNewTransaction(event, transactionPanel, inputs));\r\n  transactionPanel.querySelector(\".transaction-panel__button--cancel\").addEventListener(\"click\", () => closePanel(transactionPanel, inputs));\r\n}\r\n\r\nexport const openEditionPanel = (event) => {\r\n  // Group the inputs into an array\r\n  const inputs = [nameToEditInput, amountToEditInput, categoryToEditSelect];\r\n  // Show the edition panel\r\n  editionPanel.classList.add(\"transaction-panel--open\");\r\n  // Get the transaction and its details\r\n  const transaction = event.target.closest(\".transactions__item\");\r\n  const transactionName = transaction.querySelector(\".transactions__item-name\").textContent.trim();\r\n  const transactionAmount = transaction.querySelector(\".transactions__item-amount-text\").textContent.trim();\r\n  // Put focus on the name input\r\n  editionPanel.querySelector(\".transaction-panel__input--name\").focus();\r\n  // Fill the inputs with values from `transactionName` and `transactionAmount`\r\n  editionPanel.querySelector(\".transaction-panel__input--name\").value = transactionName;\r\n  editionPanel.querySelector(\".transaction-panel__input--amount\").value = transactionAmount;\r\n  // Add event listeners on the `Apply` and `Cancel` buttons\r\n  editionPanel.querySelector(\".transaction-panel__button--edit\").addEventListener(\"click\", (event) => editTransaction(event, editionPanel, inputs, transaction, transactionAmount));\r\n  editionPanel.querySelector(\".transaction-panel__button--cancel\").addEventListener(\"click\", () => closePanel(editionPanel, inputs));\r\n}\r\n\r\nexport const clearInputs = (inputs) => {\r\n  inputs.forEach((input) => {\r\n    input.value = \"\";\r\n    input.classList.remove(\"transaction-panel__input--error\");\r\n  });\r\n\r\n  inputs[2].selectedIndex = 0;\r\n}\r\n\r\nexport const clearErrors = (inputs) => {\r\n  // document.querySelectorAll(\".transaction-panel__error\").forEach(error => error.style.display = \"none\");\r\n  inputs.forEach((input) => {\r\n    input.classList.remove(\"transaction-panel__input--error\");\r\n    input.closest(\".transaction-panel__control-box\").querySelector(\".transaction-panel__error\").classList.remove(\"transaction-panel__error--active\");\r\n  });\r\n}\r\n\r\nexport const closePanel = (panel, inputs) => {\r\n  clearInputs(inputs);\r\n  clearErrors(inputs);\r\n  panel.classList.remove(\"transaction-panel--open\");\r\n}","function formatInputName(inputValue) {\r\n  return inputValue.trim().charAt(0).toUpperCase() + inputValue.trim().slice(1).toLowerCase();\r\n}\r\n\r\nexport default formatInputName;","import formatInputName from \"../utils/input_name.js\";\n\nconst handleFormSubmit = (event, inputs) => {\n  // Prevent page reload\n  event.preventDefault();\n  // Destructure the `inputs` array\n  const [nameInput, amountInput, categorySelect] = inputs;\n  // Get the current option from categorySelect\n  const selectedCategory = categorySelect.options[categorySelect.selectedIndex];\n  // Validate the inputs\n  checkName(nameInput);\n  checkAmount(amountInput, selectedCategory);\n  checkCategory(categorySelect);\n  // Check whether there are any errors and return `true` if there are any errors, otherwise return `false`\n  return checkForErrors(inputs);\n}\n\nconst checkName = (nameInput) => {\n  const minLength = nameInput.minLength;\n  const maxLength = nameInput.maxLength;\n\n  if (!nameInput.value) {\n    displayError(nameInput, `${formatInputName(nameInput.id)} must be provided.`);\n  } else if (nameInput.value.length < minLength || nameInput.value.length > maxLength) {\n    displayError(nameInput, `${formatInputName(nameInput.id)} must be between ${minLength} and ${maxLength} characters long.`);\n  } else {\n    removeError(nameInput);\n  }\n}\n\nconst checkAmount = (amountInput, selectedCategory) => {\n  // Get the amount of the transaction\n  const amount = parseFloat(amountInput.value);\n\n  if (isNaN(amount)) {\n    displayError(amountInput, `${formatInputName(amountInput.id)} must be provided.`);\n  } else if (amount === 0) {\n    displayError(amountInput, `${formatInputName(amountInput.id)} cannot be equal to zero.`);\n  } else if (amount > 0 && selectedCategory.textContent.startsWith(\"[ - ]\")) {\n    displayError(amountInput, `${formatInputName(amountInput.id)} must be a negative value for an expense.`);\n  } else if (amount < 0 && selectedCategory.textContent.startsWith(\"[ + ]\")) {\n    displayError(amountInput, `${formatInputName(amountInput.id)} must be a positive value for an income.`);\n  } else {\n    removeError(amountInput);\n  }\n}\n\nconst checkCategory = (categorySelect) => {\n  categorySelect.value === \"none\"\n    ? displayError(categorySelect, `${formatInputName(categorySelect.id)} must be selected.`)\n    : removeError(categorySelect);\n}\n\nconst displayError = (formControl, errorMessage) => {\n  const error = formControl.closest(\".transaction-panel__control-box\").querySelector(\".transaction-panel__error\");\n  error.classList.add(\"transaction-panel__error--active\");\n  error.textContent = errorMessage;\n  formControl.classList.add(\"transaction-panel__input--error\");\n}\n\nconst removeError = (formControl) => {\n  const error = formControl.closest(\".transaction-panel__control-box\").querySelector(\".transaction-panel__error\");\n  error.classList.remove(\"transaction-panel__error--active\");\n  error.textContent = \"\";\n  formControl.classList.remove(\"transaction-panel__input--error\");\n}\n\nconst checkForErrors = (inputs) => {\n  // Use `some` to return `true` if at least one input in the `inputs` array contains an error, otherwise return `false`\n  return inputs.some((input) => input.classList.contains(\"transaction-panel__input--error\"));\n}\n\nexport default handleFormSubmit;","import {categoryIcon} from \"../main.js\";\r\n\r\nconst checkCategory = (categorySelect) => {\r\n  switch (categorySelect.value) {\r\n    case \"salary\":\r\n      categoryIcon = `<i class=\"fa-solid fa-wallet\"></i>`;\r\n      break;\r\n    case \"investment\":\r\n      categoryIcon = `<i class=\"fa-solid fa-chart-line\"></i>`;\r\n      break;\r\n    case \"freelance\":\r\n      categoryIcon = `<i class=\"fa-solid fa-briefcase\"></i>`;\r\n      break;\r\n    case \"rent\":\r\n      categoryIcon = `<i class=\"fa-solid fa-house\"></i>`;\r\n      break;\r\n    case \"shopping\":\r\n      categoryIcon = `<i class=\"fa-solid fa-cart-shopping\"></i>`;\r\n      break;\r\n    case \"food\":\r\n      categoryIcon = `<i class=\"fa-solid fa-utensils\"></i>`;\r\n      break;\r\n    case \"bills\":\r\n      categoryIcon = `<i class=\"fa-solid fa-credit-card\"></i>`;\r\n      break;\r\n    case \"cinema\":\r\n      categoryIcon = `<i class=\"fa-solid fa-film\"></i>`;\r\n      break;\r\n    case \"leisure\":\r\n      categoryIcon = `<i class=\"fa-solid fa-glass-cheers\"></i>`;\r\n      break;\r\n    case \"other\":\r\n      categoryIcon = `<i class=\"fa-solid fa-pen\"></i>`;\r\n      break;\r\n  }\r\n};\r\n\r\nexport default checkCategory;","const formatCurrency = (amount) => {\r\n  // It a convention that the formatted monetary value is returned as a string\r\n  return (Math.round(parseFloat(amount) * 100) / 100).toFixed(2);\r\n} \r\n\r\nexport default formatCurrency;","import {availableMoney} from \"../main.js\";\r\n\r\nfunction calculateBalance(moneyArray) {\r\n  // Calculate the sum of all the transaction amounts\r\n  let balance = moneyArray.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\r\n  // Round the balance to two decimal places and then convert it to a number\r\n  balance = parseFloat(balance.toFixed(2));\r\n  // Format the balance to a string\r\n  const formattedBalance = balance.toString();\r\n  // Set the balance in the DOM\r\n  availableMoney.textContent = formattedBalance;\r\n  // Remove the classes that identify the balance as positive or negative in case balance is 0\r\n  availableMoney.classList.remove(\"options__balance--positive\", \"options__balance--negative\");\r\n  // Otherwise add the class that identifies the balance as positive or negative\r\n  if (balance > 0) {\r\n    availableMoney.classList.add(\"options__balance--positive\");\r\n  } else if (balance < 0) {\r\n    availableMoney.classList.add(\"options__balance--negative\");\r\n  }\r\n}\r\n\r\nexport default calculateBalance;","import {availableMoney, categoryIcon, incomesList, expensesList, confirmationModal} from \"../main.js\";\nimport {openEditionPanel, closePanel} from \"../panel/transaction_panel.js\";\nimport handleFormSubmit from \"../panel/form_validation.js\";\nimport checkCategory from \"../utils/category.js\";\nimport formatInputName from \"../utils/input_name.js\";\nimport formatCurrency from \"../utils/money.js\";\nimport calculateBalance from \"../utils/balance.js\";\n// Array to store information about transactions\nexport let moneyArray = [];\n// Transaction ID\nexport let transactionId = 0;\n\n// Function to save data in Local Storage\nconst saveToStorage = () => {\n  localStorage.setItem(\"moneyArray\", JSON.stringify(moneyArray));\n}\n\n// Function to load data from Local Storage\nconst loadFromStorage = () => {\n  // Get data from Local Storage\n  const storedAmounts = localStorage.getItem(\"moneyArray\");\n  // Update `moneyArray` with the data from Local Storage\n  if (storedAmounts) {\n    moneyArray = JSON.parse(storedAmounts);\n  }\n}\n\nexport const createNewTransaction = (event, transactionPanel, inputs) => {\n  // Return whether the form validation resulted in erros or not\n  const errorsOccurred = handleFormSubmit(event, inputs);\n  // If there are no errors, create a new transaction\n  if (!errorsOccurred) {\n    // Destructure the `inputs` array\n    const [nameInput, amountInput, categorySelect] = inputs;\n    // Increment the transaction id\n    transactionId += 1;\n    // Return category icon based on selected category\n    checkCategory(categorySelect);\n    // Return the monetary amount of the transaction\n    const amountFormatted = formatCurrency(amountInput.value);\n    // Create a list item\n    const listItem = document.createElement(\"li\");\n    // Create a container for a new transaction\n    const transactionContainer = document.createElement(\"div\");\n    // Give the new transaction a unique id\n    transactionContainer.dataset.id = transactionId;\n    // Set the new transaction's name, amount category icon\n    const transaction = document.querySelector(\".transaction__template\").content.cloneNode(true);\n    transaction.querySelector(\".transactions__item-name\").innerHTML = `${categoryIcon} ${formatInputName(nameInput.value)}`;\n    transaction.querySelector(\".transactions__item-amount-text\").innerHTML = `<i class=\"fa-solid fa-dollar-sign\"></i> ${amountFormatted}`;\n    transaction.querySelector(\".transactions__item-amount-button--edit\").addEventListener(\"click\", (event) => openEditionPanel(event));\n    transaction.querySelector(\".transactions__item-amount-button--delete\").addEventListener(\"click\", (event) => deleteTransaction(event));\n    // Put the new transaction inside its container\n    transactionContainer.appendChild(transaction);\n    // Put the new transaction's container inside the list item (li) tag\n    listItem.appendChild(transactionContainer);\n    // If amount is positive, add a new income, otherwise add a new expense\n    if (parseFloat(amountFormatted) > 0) {\n      transactionContainer.classList.add(\"transactions__item\", \"transactions__item--income\");\n      incomesList.appendChild(listItem);\n    } else {\n      transactionContainer.classList.add(\"transactions__item\", \"transactions__item--expense\");\n      expensesList.appendChild(listItem);\n    }\n    // Add the amount of the new transaction to `moneyArray`\n    moneyArray.push(parseFloat(amountFormatted));\n    // Save the data in Local Storage\n    saveToStorage();\n    // Recalculate the balance\n    calculateBalance(moneyArray);\n    // Close the panel\n    closePanel(transactionPanel, inputs);\n\n    console.log(moneyArray);\n  };\n}\n\nexport const editTransaction = (event, editionPanel, inputs, transaction, transactionAmount) => {\n  // Return whether the form validation resulted in erros or not\n  const errorsOccured = handleFormSubmit(event, inputs);\n  // If there are no errors, edit the transaction\n  if (!errorsOccured) {\n    // Destructure the `inputs` array\n    const [nameInput, amountInput, categorySelect] = inputs;\n    // Return category icon based on selected category\n    checkCategory(categorySelect);\n    // // Get the old amount and turn it into a floating-point number\n    const oldAmount = parseFloat(transactionAmount);\n    // // Get the index of the old amount from `moneyArray`\n    const oldAmountIndex = moneyArray.indexOf(oldAmount);\n    // // Return the monetary value of the transaction\n    const newAmountFormatted = formatCurrency(amountInput.value);\n    // // Set the new transactions name and category icon\n    transaction.querySelector(\".transactions__item-name\").innerHTML = `${categoryIcon} ${formatInputName(nameInput.value)}`;\n    // Set the new transaction amount\n    transaction.querySelector(\".transactions__item-amount-text\").innerHTML = `<i class=\"fa-solid fa-dollar-sign\"></i> ${newAmountFormatted}`;\n    // Remove the classes that identify the transaction as an income or expense\n    transaction.classList.remove(\"transactions__item--income\", \"transactions__item--expense\");\n    // If the new amount is positive, turn the transaction into an income, otherwise turn it into an expense\n    if (parseFloat(newAmountFormatted) > 0) {\n      transaction.classList.remove(\"transactions__item--expense\");\n      transaction.classList.add(\"transactions__item--income\");\n    } else {\n      transaction.classList.remove(\"transactions__item--income\");\n      transaction.classList.add(\"transactions__item--expense\");\n    }\n    // Replace the old amount with the new amount\n    moneyArray.splice(oldAmountIndex, 1, parseFloat(newAmountFormatted));\n    // Recalculate the balance\n    calculateBalance(moneyArray);\n    // Close the panel\n    closePanel(editionPanel, inputs);\n  }\n}\n\nconst deleteTransaction = (event) => {\n  const transactionToDelete = event.target.closest(\".transactions__item\");\n  // Get the amount of the transaction and turn it into a monetary value\n  const amountString = transactionToDelete.querySelector(\".transactions__item-amount-text\").textContent.trim();\n  const amountNumber = parseFloat(amountString);\n  // Get the index of the transaction amount in `moneyArray`\n  const transactionIndex = moneyArray.indexOf(amountNumber);\n  // Remove the transaction from the DOM\n  transactionToDelete.classList.contains(\"transactions__item--income\")\n    ? incomesList.removeChild(transactionToDelete.parentElement)\n    : expensesList.removeChild(transactionToDelete.parentElement);\n  // Remove the transaction from `moneyArray` and recalculate the balance\n  moneyArray.splice(transactionIndex, 1);\n  calculateBalance(moneyArray);  \n}\n\nexport const deleteAllTransactions = () => {\n  incomesList.innerHTML = \"\";\n  expensesList.innerHTML = \"\";\n  moneyArray = [0];\n  availableMoney.textContent = \"0\";\n  availableMoney.style.color = \"#f0ebd8\";\n  confirmationModal.classList.remove(\"confirmation-modal--open\");\n}\n\nexport default loadFromStorage;","import {confirmationModal} from \"../main.js\";\r\nimport {deleteAllTransactions} from \"../data/transactions.js\";\r\n\r\nexport const openConfirmationModal = () => {\r\n  confirmationModal.classList.add(\"confirmation-modal--open\");\r\n  confirmationModal.querySelector(\".confirmation-modal__button--confirm\").removeEventListener(\"click\", deleteAllTransactions);\r\n  confirmationModal.querySelector(\".confirmation-modal__button--confirm\").addEventListener(\"click\", deleteAllTransactions);\r\n}\r\n\r\nexport const closeConfirmationModal = () => {\r\n  confirmationModal.classList.remove(\"confirmation-modal--open\");\r\n}","import setFooterYear from \"./footer.js\";\nimport loadFromStorage from \"./data/transactions.js\";\nimport {openTransactionPanel, closePanel} from \"./panel/transaction_panel.js\";\nimport {openConfirmationModal, closeConfirmationModal} from \"./modal/modal.js\";\nimport {switchToDarkMode, switchToLightMode} from \"./utils/color_mode.js\";\n\n// Root element\nexport let rootElement; \n// Footer year\nexport let footerYear;\n// Wallet icon\nexport let walletIcon;\n// Balance info (how much money is available)\nexport let availableMoney;\n// Lists of transactions\nexport let incomesList;\nexport let expensesList;\n// Category icon\nexport let categoryIcon;  \n// Buttons for transactions\nlet addTransactionBtn; \nlet deleteAllBtn;\n// Light and dark mode buttons\nlet lightCircle;\nlet darkCircle;\n// Transaction creation panel\nexport let transactionPanel;\nexport let nameInput;\nexport let amountInput;\nexport let categorySelect;\nlet closePanelBtn;\n// Transaction edition panel\nexport let editionPanel;\nexport let nameToEditInput;\nexport let amountToEditInput;\nexport let categoryToEditSelect;\nlet closeEditionPanelBtn;\n// Confirmation modal\nexport let confirmationModal;\nlet cancelDeletionButton;\n\nconst main = () => {\n  getElements();\n  addEventListeners();\n  setFooterYear();\n  loadFromStorage();\n}\n\nconst getElements = () => {\n  // Root element\n  rootElement = document.documentElement;\n  // Footer year\n  footerYear = document.querySelector(\".footer__year\");\n  // Wallet icon\n  walletIcon = document.querySelector(\".header__title-icon\");\n  // Balance info\n  availableMoney = document.querySelector(\".options__balance > span\");\n  // Lists of transactions\n  incomesList = document.querySelector(\".incomes-box__list\");\n  expensesList = document.querySelector(\".expenses-box__list\");\n  // Buttons for transactions\n  addTransactionBtn = document.querySelector(\".options__controls-btn--add\");\n  deleteAllBtn = document.querySelector(\".options__controls-btn--deleteAll\");\n  // Light and dark mode buttons\n  lightCircle = document.querySelector(\".options__style-button--light\");\n  darkCircle = document.querySelector(\".options__style-button--dark\");\n  // Transaction creation panel\n  transactionPanel = document.querySelector(\".transaction-panel--create\");\n  nameInput = transactionPanel.querySelector(\"#name\");\n  amountInput = transactionPanel.querySelector(\"#amount\");\n  categorySelect = transactionPanel.querySelector(\"#category\");\n  closePanelBtn = transactionPanel.querySelector(\".transaction-panel__xmark\");\n  // Transaction edition panel\n  editionPanel = document.querySelector(\".transaction-panel--edit\");\n  nameToEditInput = editionPanel.querySelector(\"#name-to-edit\");\n  amountToEditInput = editionPanel.querySelector(\"#amount-to-edit\");\n  categoryToEditSelect = editionPanel.querySelector(\"#category-to-edit\");\n  closeEditionPanelBtn = editionPanel.querySelector(\".transaction-panel__xmark\"); \n  // Confirmation modal\n  confirmationModal = document.querySelector(\".confirmation-modal\");\n  cancelDeletionButton = document.querySelector(\".confirmation-modal__button--cancel\");\n}\n\nconst addEventListeners = () => {\n  addTransactionBtn.addEventListener(\"click\", openTransactionPanel);\n  deleteAllBtn.addEventListener(\"click\", openConfirmationModal);\n  cancelDeletionButton.addEventListener(\"click\", closeConfirmationModal);\n  closePanelBtn.addEventListener(\"click\", () => closePanel(transactionPanel, [nameInput, amountInput, categorySelect]));\n  closeEditionPanelBtn.addEventListener(\"click\", () => closePanel(editionPanel, [nameToEditInput, amountToEditInput, categoryToEditSelect]));\n  lightCircle.addEventListener(\"click\", switchToLightMode); \n  darkCircle.addEventListener(\"click\", switchToDarkMode);\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", main);\n\n// const editTransaction = (transactionId) => {\n//   const currentIncomes = incomesBox.children;\n//   const currentExpenses = expensesBox.children;\n\n//   const transactionToEdit = document.getElementById(transactionId);\n//   const amountOfTransactionToEdit = parseFloat(transactionToEdit.childNodes[9].childNodes[1].innerText.slice(1));\n//   const indexOfTransactionToEdit = moneyArray.indexOf(amountOfTransactionToEdit);\n\n//   const currentNameOfTransaction = transactionToEdit.querySelector(\".transactions__item-name\");\n//   const currentAmountOfTransaction = transactionToEdit.querySelector(\".transactions__item-amount-text\");\n\n//   const newNameOfTransaction = nameToEditInput.value;\n//   const newAmountOfTransaction = parseFloat(amountToEditInput.value);\n\n//   checkCategory(categoryToEditSelect);\n\n//   currentNameOfTransaction.innerHTML = `${categoryIcon} ${newNameOfTransaction.charAt(0).toUpperCase() + newNameOfTransaction.slice(1)}`;\n//   currentAmountOfTransaction.innerHTML = `<i class=\"fa-solid fa-dollar-sign\"></i> ${newAmountOfTransaction}`;\n\n//   if (newAmountOfTransaction > 0) {\n//     const isExpense = Array.from(currentExpenses).includes(transactionToEdit);\n\n//     if (isExpense) {\n//       transactionToEdit.classList.remove(\"transactions__item--expense\");\n//       transactionToEdit.classList.add(\"transactions__item--income\");\n//       expensesBox.removeChild(transactionToEdit);\n//       incomesBox.appendChild(transactionToEdit);\n//     }\n//   } else {\n//     const isIncome = Array.from(currentIncomes).includes(transactionToEdit);\n\n//     if (isIncome) {\n//       transactionToEdit.classList.remove(\"transactions__item--income\");\n//       transactionToEdit.classList.add(\"transactions__item--expense\");\n//       incomesBox.removeChild(transactionToEdit);\n//       expensesBox.appendChild(transactionToEdit);\n//     }\n//   }\n\n//   moneyArray[indexOfTransactionToEdit] = newAmountOfTransaction;\n//   calculateBalance(moneyArray);\n// } ","import {rootElement, walletIcon} from \"../main.js\";\r\n\r\nexport const switchToLightMode = () => {\r\n  rootElement.style.setProperty(\"--darkColor\", \"#f0ebd8\");\r\n  rootElement.style.setProperty(\"--lightColor\", \"#0d1321\");\r\n  walletIcon.style.setProperty(\"stroke\", \"#0d1321\");\r\n}\r\n\r\nexport const switchToDarkMode = () => {\r\n  rootElement.style.setProperty(\"--darkColor\", \"#0d1321\");\r\n  rootElement.style.setProperty(\"--lightColor\", \"#f0ebd8\");\r\n  walletIcon.style.setProperty(\"stroke\", \"#f0ebd8\");\r\n};","import { footerYear } from \"./main.js\";\r\n\r\nconst setFooterYear = () => {\r\n  const now = new Date();\r\n  footerYear.textContent = now.getFullYear();\r\n}\r\n\r\nexport default setFooterYear;"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","openTransactionPanel","inputs","nameInput","amountInput","categorySelect","transactionPanel","classList","add","querySelector","focus","addEventListener","event","createNewTransaction","closePanel","panel","forEach","input","value","remove","selectedIndex","clearInputs","closest","clearErrors","inputValue","trim","charAt","toUpperCase","slice","toLowerCase","displayError","formControl","errorMessage","error","textContent","removeError","preventDefault","_inputs","selectedCategory","options","minLength","maxLength","length","concat","formatInputName","id","checkName","amount","parseFloat","isNaN","startsWith","checkAmount","checkCategory","some","contains","checkForErrors","categoryIcon","Math","round","toFixed","moneyArray","balance","reduce","accumulator","currentValue","formattedBalance","toString","availableMoney","transactionId","handleFormSubmit","_slicedToArray","amountFormatted","formatCurrency","listItem","document","createElement","transactionContainer","dataset","transaction","content","cloneNode","innerHTML","nameToEditInput","amountToEditInput","categoryToEditSelect","editionPanel","target","transactionName","transactionAmount","editTransaction","openEditionPanel","deleteTransaction","appendChild","incomesList","expensesList","push","localStorage","setItem","JSON","stringify","calculateBalance","console","log","_inputs2","oldAmount","oldAmountIndex","indexOf","newAmountFormatted","splice","transactionToDelete","amountString","amountNumber","transactionIndex","removeChild","parentElement","deleteAllTransactions","style","color","confirmationModal","rootElement","footerYear","walletIcon","addTransactionBtn","deleteAllBtn","lightCircle","darkCircle","closePanelBtn","closeEditionPanelBtn","cancelDeletionButton","openConfirmationModal","removeEventListener","closeConfirmationModal","switchToLightMode","setProperty","switchToDarkMode","storedAmounts","now","documentElement","Date","getFullYear","getItem","parse"],"sourceRoot":""}