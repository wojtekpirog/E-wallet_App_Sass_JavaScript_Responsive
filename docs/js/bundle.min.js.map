{"version":3,"file":"bundle.min.js","mappings":"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","sources":["webpack://e-wallet_app/webpack/bootstrap","webpack://e-wallet_app/webpack/runtime/define property getters","webpack://e-wallet_app/webpack/runtime/hasOwnProperty shorthand","webpack://e-wallet_app/./src/js/utils/category.js","webpack://e-wallet_app/./src/js/panel/transaction_panel.js","webpack://e-wallet_app/./src/js/utils/input_name.js","webpack://e-wallet_app/./src/js/panel/form_validation.js","webpack://e-wallet_app/./src/js/utils/money.js","webpack://e-wallet_app/./src/js/utils/transaction.js","webpack://e-wallet_app/./src/js/data/transactions.js","webpack://e-wallet_app/./src/js/main.js","webpack://e-wallet_app/./src/js/utils/balance.js","webpack://e-wallet_app/./src/js/modal/modal.js","webpack://e-wallet_app/./src/js/utils/color_mode.js","webpack://e-wallet_app/./src/js/footer.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export const getCategoryIcon = (selectedCategory) => {\r\n  switch (selectedCategory) {\r\n    case \"salary\":\r\n      return `<i class=\"fa-solid fa-wallet\"></i>`;\r\n    case \"investment\":\r\n      return `<i class=\"fa-solid fa-chart-line\"></i>`;\r\n    case \"freelance\":\r\n      return `<i class=\"fa-solid fa-briefcase\"></i>`;\r\n    case \"rent\":\r\n      return `<i class=\"fa-solid fa-house\"></i>`;\r\n    case \"shopping\":\r\n      return `<i class=\"fa-solid fa-cart-shopping\"></i>`;\r\n    case \"food\":\r\n      return `<i class=\"fa-solid fa-utensils\"></i>`;\r\n    case \"bills\":\r\n      return `<i class=\"fa-solid fa-credit-card\"></i>`;\r\n    case \"cinema\":\r\n      return `<i class=\"fa-solid fa-film\"></i>`;\r\n    case \"leisure\":\r\n      return `<i class=\"fa-solid fa-glass-cheers\"></i>`;\r\n    case \"other\":\r\n      return `<i class=\"fa-solid fa-pen\"></i>`;\r\n    default: // Handle an unknown category\r\n      console.warn(`Unknown category: ${selectedCategory}`);\r\n      return `<i class=\"fa-solid fa-question\"></i>`;\r\n  }\r\n};\r\n\r\nexport const getCategoryByIcon = (transactionIcon) => {\r\n  switch (transactionIcon) {\r\n    case \"fa-wallet\":\r\n      return \"salary\";\r\n    case \"fa-chart-line\":\r\n      return \"investment\";\r\n    case \"fa-briefcase\":\r\n      return \"freelance\";\r\n    case \"fa-house\":\r\n      return \"rent\";\r\n    case \"fa-cart-shopping\":\r\n      return \"shopping\";\r\n    case \"fa-utensils\":\r\n      return \"food\";\r\n    case \"fa-credit-card\":\r\n      return \"bills\";\r\n    case \"fa-film\":\r\n      return \"cinema\";\r\n    case \"fa-glass-cheers\":\r\n      return \"leisure\";\r\n    case \"fa-pen\":\r\n      return \"other\";\r\n    default: // Handle an unknown icon\r\n      console.warn(`Unknown icon: ${transactionIcon}`);\r\n  }\r\n}","import {transactionPanel, editionPanel, nameInput, nameToEditInput, amountInput, amountToEditInput, categorySelect, categoryToEditSelect} from \"../main.js\";\r\nimport {createNewTransaction, editTransaction} from \"../data/transactions.js\";\r\nimport {getCategoryByIcon} from \"../utils/category.js\";\r\n\r\nexport const openTransactionPanel = () => {\r\n  // Group the inputs into an array\r\n  const inputs = [nameInput, amountInput, categorySelect];\r\n  // Show the transaction panel\r\n  transactionPanel.classList.add(\"transaction-panel--open\");\r\n  // Put focus on the name input\r\n  transactionPanel.querySelector(\".transaction-panel__input--name\").focus();\r\n  // Add event listeners on the `Save` and `Cancel` buttons\r\n  transactionPanel.querySelector(\".transaction-panel__button--save\").addEventListener(\"click\", (event) => createNewTransaction(event, transactionPanel, inputs));\r\n  transactionPanel.querySelector(\".transaction-panel__button--cancel\").addEventListener(\"click\", () => closePanel(transactionPanel, inputs));\r\n}\r\n\r\nexport const openEditionPanel = (transactionId) => {\r\n  console.log(\"Edit transaction with ID:\", transactionId, \"...\");\r\n  // Group the inputs into an array\r\n  const inputs = [nameToEditInput, amountToEditInput, categoryToEditSelect];\r\n  // Show the edition panel\r\n  editionPanel.classList.add(\"transaction-panel--open\");\r\n  // Put focus on the name input\r\n  editionPanel.querySelector(\".transaction-panel__input--name\").focus();\r\n  // Get the transaction and its details\r\n  const transaction = document.querySelector(`[data-id=\"${transactionId}\"]`);\r\n  const transactionName = transaction.querySelector(\".transactions__item-name\").textContent.trim();\r\n  const transactionAmount = transaction.querySelector(\".transactions__item-amount-text\").textContent.trim();\r\n  const transactionIcon = transaction.querySelector(\".transactions__item-name > i\").classList[1];\r\n  // Get the transaction category's name by category icon\r\n  const transactionCategory = getCategoryByIcon(transactionIcon);\r\n  // Fill the inputs with values from `transactionName`, `transactionAmount` and `transactionCategory`\r\n  editionPanel.querySelector(\".transaction-panel__input--name\").value = transactionName;\r\n  editionPanel.querySelector(\".transaction-panel__input--amount\").value = transactionAmount;\r\n  editionPanel.querySelector(\".transaction-panel__select\").value = transactionCategory;\r\n  // Add event listeners on the `Apply` and `Cancel` buttons\r\n  editionPanel.querySelector(\".transaction-panel__button--edit\").addEventListener(\"click\", (event) => editTransaction(event, transactionId, editionPanel, inputs));\r\n  editionPanel.querySelector(\".transaction-panel__button--cancel\").addEventListener(\"click\", () => closePanel(editionPanel, inputs));\r\n}\r\n\r\nexport const clearInputs = (inputs) => {\r\n  inputs.forEach((input) => {\r\n    input.value = \"\";\r\n    input.classList.remove(\"transaction-panel__input--error\");\r\n  });\r\n\r\n  inputs[2].selectedIndex = 0;\r\n}\r\n\r\nexport const clearErrors = (inputs) => {\r\n  // document.querySelectorAll(\".transaction-panel__error\").forEach(error => error.style.display = \"none\");\r\n  inputs.forEach((input) => {\r\n    input.classList.remove(\"transaction-panel__input--error\");\r\n    input.closest(\".transaction-panel__control-box\").querySelector(\".transaction-panel__error\").classList.remove(\"transaction-panel__error--active\");\r\n  });\r\n}\r\n\r\nexport const closePanel = (panel, inputs) => {\r\n  clearInputs(inputs);\r\n  clearErrors(inputs);\r\n  panel.classList.remove(\"transaction-panel--open\");\r\n}","function formatInputName(inputValue) {\r\n  return inputValue.trim().charAt(0).toUpperCase() + inputValue.trim().slice(1).toLowerCase();\r\n}\r\n\r\nexport default formatInputName;","import formatInputName from \"../utils/input_name.js\";\n\nconst handleFormSubmit = (event, inputs) => {\n  // Prevent page reload\n  event.preventDefault();\n  // Destructure the `inputs` array\n  const [nameInput, amountInput, categorySelect] = inputs;\n  // Get the current option from categorySelect\n  const selectedCategory = categorySelect.options[categorySelect.selectedIndex];\n  // Validate the inputs\n  checkName(nameInput);\n  checkAmount(amountInput, selectedCategory);\n  checkCategory(categorySelect);\n  // Check whether there are any errors and return `true` if there are any errors, otherwise return `false`\n  return checkForErrors(inputs);\n}\n\nconst checkName = (nameInput) => {\n  const minLength = nameInput.minLength;\n  const maxLength = nameInput.maxLength;\n\n  if (!nameInput.value) {\n    displayError(nameInput, `${formatInputName(nameInput.id)} must be provided.`);\n  } else if (nameInput.value.length < minLength || nameInput.value.length > maxLength) {\n    displayError(nameInput, `${formatInputName(nameInput.id)} must be between ${minLength} and ${maxLength} characters long.`);\n  } else {\n    removeError(nameInput);\n  }\n}\n\nconst checkAmount = (amountInput, selectedCategory) => {\n  // Get the amount of the transaction\n  const amount = parseFloat(amountInput.value);\n\n  if (isNaN(amount)) {\n    displayError(amountInput, `${formatInputName(amountInput.id)} must be provided.`);\n  } else if (amount === 0) {\n    displayError(amountInput, `${formatInputName(amountInput.id)} cannot be equal to zero.`);\n  } else if (amount > 0 && selectedCategory.textContent.startsWith(\"[ - ]\")) {\n    displayError(amountInput, `${formatInputName(amountInput.id)} must be a negative value for an expense.`);\n  } else if (amount < 0 && selectedCategory.textContent.startsWith(\"[ + ]\")) {\n    displayError(amountInput, `${formatInputName(amountInput.id)} must be a positive value for an income.`);\n  } else {\n    removeError(amountInput);\n  }\n}\n\nconst checkCategory = (categorySelect) => {\n  categorySelect.value === \"none\"\n    ? displayError(categorySelect, `${formatInputName(categorySelect.id)} must be selected.`)\n    : removeError(categorySelect);\n}\n\nconst displayError = (formControl, errorMessage) => {\n  const error = formControl.closest(\".transaction-panel__control-box\").querySelector(\".transaction-panel__error\");\n  error.classList.add(\"transaction-panel__error--active\");\n  error.textContent = errorMessage;\n  formControl.classList.add(\"transaction-panel__input--error\");\n}\n\nconst removeError = (formControl) => {\n  const error = formControl.closest(\".transaction-panel__control-box\").querySelector(\".transaction-panel__error\");\n  error.classList.remove(\"transaction-panel__error--active\");\n  error.textContent = \"\";\n  formControl.classList.remove(\"transaction-panel__input--error\");\n}\n\nconst checkForErrors = (inputs) => {\n  // Use `some` to return `true` if at least one input in the `inputs` array contains an error, otherwise return `false`\n  return inputs.some((input) => input.classList.contains(\"transaction-panel__input--error\"));\n}\n\nexport default handleFormSubmit;","const formatCurrency = (amount) => {\r\n  // It a convention that the formatted monetary value is returned as a string\r\n  return (Math.round(parseFloat(amount) * 100) / 100).toFixed(2);\r\n} \r\n\r\nexport default formatCurrency;","import {moneyArray} from \"../data/transactions.js\";\r\n\r\nexport const getTransactionIndex = (transactionId) => {\r\n  let matchingTransaction;\r\n\r\n  moneyArray.forEach((transaction, index) => {\r\n    if (index + 1 === transactionId) matchingTransaction = transaction;\r\n  });\r\n  // Return the index of the matching transaction\r\n  return moneyArray.indexOf(matchingTransaction);\r\n}\r\n\r\nexport default getTransactionIndex;","import {availableMoney, incomesList, expensesList, confirmationModal} from \"../main.js\";\nimport {openEditionPanel, closePanel} from \"../panel/transaction_panel.js\";\nimport handleFormSubmit from \"../panel/form_validation.js\";\nimport {getCategoryIcon} from \"../utils/category.js\";\nimport formatInputName from \"../utils/input_name.js\";\nimport formatCurrency from \"../utils/money.js\";\nimport calculateBalance from \"../utils/balance.js\";\nimport getTransactionIndex from \"../utils/transaction.js\";\n// Array to store information about transactions\nexport let moneyArray = [];\n\n// Function to save data in Local Storage\nconst saveToStorage = () => {\n  localStorage.setItem(\"moneyArray\", JSON.stringify(moneyArray));\n}\n\n// Function to load data from Local Storage\nexport const loadFromStorage = () => {\n  // Get data from Local Storage\n  const storedAmounts = localStorage.getItem(\"moneyArray\");\n  // Update `moneyArray` with the data from Local Storage\n  if (storedAmounts) {\n    moneyArray = JSON.parse(storedAmounts);\n  }\n}\n\n// Function to render transactions from `moneyArray`\nexport const renderTransactions = () => {\n  // Reset both incomesList and expensesList and balance info in availableMoney\n  clearStuff();\n  // Load transactions from Local Storage (get updated `moneyArray`)\n  loadFromStorage();\n  // Render transactions from `moneyArray`, if there are any\n  if (moneyArray.length > 0) {\n    // Render HTML for each transaction in `moneyArray`\n    moneyArray.forEach((transaction, index) => {\n      // Create a list item\n      const listItem = document.createElement(\"li\");\n      // Create a container for a new transaction\n      const transactionContainer = document.createElement(\"div\");\n      // Give the new transaction a unique id as a data attribute\n      const transactionId = index + 1;\n      transactionContainer.dataset.id = transactionId;\n      // Get a copy of the document fragment from template\n      const transactionElement = document.querySelector(\".transaction__template\").content.cloneNode(true);\n      // Fill in the transaction's data\n      transactionElement.querySelector(\".transactions__item-name\").innerHTML = `${transaction.categoryIcon} ${transaction.name}`;\n      transactionElement.querySelector(\".transactions__item-amount-text\").innerHTML = `<i class=\"fa-solid fa-dollar-sign\"></i> ${transaction.amount}`;\n      transactionElement.querySelector(\".transactions__item-amount-button--edit\").addEventListener(\"click\", () => openEditionPanel(transactionId));\n      transactionElement.querySelector(\".transactions__item-amount-button--delete\").addEventListener(\"click\", () => deleteTransaction(transactionId));\n      // Put the new transaction inside its container\n      transactionContainer.appendChild(transactionElement);\n      // Put the new transaction's container inside the list item (li) tag\n      listItem.appendChild(transactionContainer);\n      // If amount is positive, add a new income, otherwise add a new expense\n      if (parseFloat(transaction.amount) > 0) {\n        transactionContainer.classList.add(\"transactions__item\", \"transactions__item--income\");\n        incomesList.appendChild(listItem);\n      } else {\n        transactionContainer.classList.add(\"transactions__item\", \"transactions__item--expense\");\n        expensesList.appendChild(listItem);\n      }\n    });\n    // Recalculate the balance\n    calculateBalance(moneyArray);\n  }\n}\n\nexport const createNewTransaction = (event, transactionPanel, inputs) => {\n  console.log(\"Kliknięto w przycisk 'Zapisz' ...\");\n  // Return whether the form validation resulted in erros or not\n  const errorsOccurred = handleFormSubmit(event, inputs);\n  // If there are no errors, create a new transaction\n  if (!errorsOccurred) {\n    // Destructure the `inputs` array\n    const [nameInput, amountInput, categorySelect] = inputs;\n    // Return the formatted transaction's name\n    const nameFormatted = formatInputName(nameInput.value);\n    // Return category icon based on selected category\n    const categoryIcon = getCategoryIcon(categorySelect.value);\n    // Return the monetary amount of the transaction\n    const amountFormatted = formatCurrency(amountInput.value);\n    // Create a new transaction as an object\n    moneyArray.push({\n      name: nameFormatted,\n      categoryIcon: categoryIcon,\n      amount: amountFormatted\n    });\n    // Save the newly updated `moneyArray` to LocalStorage\n    saveToStorage();\n    // Re-render the transactions\n    renderTransactions();\n    // Close the panel\n    closePanel(transactionPanel, inputs);\n  };\n}\n\nexport const editTransaction = (event, transactionId, editionPanel, inputs) => {\n  console.log(\"Edit transaction with ID:\", transactionId, \"...\");\n  console.log(\"Kliknięto w przycisk 'Edytuj' ...\");\n  // Return whether the form validation resulted in erros or not\n  const errorsOccured = handleFormSubmit(event, inputs);\n  // If there are no errors, edit the transaction\n  if (!errorsOccured) {\n    // Destructure the `inputs` array\n    const [nameToEditInput, amountToEditInput, categoryToEditSelect] = inputs;\n    // Return the formatted new transaction's name\n    const newNameFormatted = formatInputName(nameToEditInput.value);\n    // Return category icon based on selected category\n    const newCategoryIcon = getCategoryIcon(categoryToEditSelect.value);\n    // Return the monetary amount of the transaction\n    const newAmountFormatted = formatCurrency(amountToEditInput.value);\n    // Create an object representing the new transaction\n    const newTransaction = {\n      name: newNameFormatted,\n      categoryIcon: newCategoryIcon,\n      amount: newAmountFormatted\n    };\n    // Get the index of the transaction to be edited in `moneyArray` based on its id\n    const matchingTransactionIndex = getTransactionIndex(transactionId);\n    // Edit the matching transaction in `moneyArray`\n    moneyArray.splice(matchingTransactionIndex, 1, newTransaction);\n    // Save the updated `moneyArray` to Local Storage\n    saveToStorage();\n    // Re-render the transactions\n    renderTransactions();\n    // Close the edition panel\n    closePanel(editionPanel, inputs);\n  }\n}\n\nconst deleteTransaction = (transactionId) => {\n  // Get the index of the transaction to be removed from `moneyArray` based on its id\n  const matchingTransactionIndex = getTransactionIndex(transactionId); \n  // Remove `matchingTransaction` from `moneyArray`\n  moneyArray.splice(matchingTransactionIndex, 1);\n  // Save the updated `moneyArray` to Local Storage\n  saveToStorage();\n  // Re-render the transactions\n  renderTransactions();\n}\n\n// export const editTransaction = (event, editionPanel, inputs, transaction, transactionAmount) => {\n//   // Return whether the form validation resulted in erros or not\n//   const errorsOccured = handleFormSubmit(event, inputs);\n//   // If there are no errors, edit the transaction\n//   if (!errorsOccured) {\n//     // Destructure the `inputs` array\n//     const [nameInput, amountInput, categorySelect] = inputs;\n//     // Return category icon based on selected category\n//     checkCategory(categorySelect);\n//     // // Get the old amount and turn it into a floating-point number\n//     const oldAmount = parseFloat(transactionAmount);\n//     // // Get the index of the old amount from `moneyArray`\n//     const oldAmountIndex = moneyArray.indexOf(oldAmount);\n//     // // Return the monetary value of the transaction\n//     const newAmountFormatted = formatCurrency(amountInput.value);\n//     // // Set the new transactions name and category icon\n//     transaction.querySelector(\".transactions__item-name\").innerHTML = `${categoryIcon} ${formatInputName(nameInput.value)}`;\n//     // Set the new transaction amount\n//     transaction.querySelector(\".transactions__item-amount-text\").innerHTML = `<i class=\"fa-solid fa-dollar-sign\"></i> ${newAmountFormatted}`;\n//     // Remove the classes that identify the transaction as an income or expense\n//     transaction.classList.remove(\"transactions__item--income\", \"transactions__item--expense\");\n//     // If the new amount is positive, turn the transaction into an income, otherwise turn it into an expense\n//     if (parseFloat(newAmountFormatted) > 0) {\n//       transaction.classList.remove(\"transactions__item--expense\");\n//       transaction.classList.add(\"transactions__item--income\");\n//     } else {\n//       transaction.classList.remove(\"transactions__item--income\");\n//       transaction.classList.add(\"transactions__item--expense\");\n//     }\n//     // Replace the old amount with the new amount\n//     moneyArray.splice(oldAmountIndex, 1, parseFloat(newAmountFormatted));\n//     // Recalculate the balance\n//     calculateBalance(moneyArray);\n//     // Close the panel\n//     closePanel(editionPanel, inputs);\n//   }\n// }\n\nexport const deleteAllTransactions = () => {\n  // Remove all transactions from `moneyArray`\n  moneyArray = [];\n  // Save the updated `moneyArray` to Local Storage\n  saveToStorage();\n  // Clear both incomesList and expensesList and balance info in `availableMoney`\n  clearStuff();\n  // Close the confirmation modal\n  confirmationModal.classList.remove(\"confirmation-modal--open\");\n}\n\nconst clearStuff = () => {\n  // Reset both incomesList and expensesList\n  incomesList.innerHTML = \"\";\n  expensesList.innerHTML = \"\";\n  // Reset textContent and classList of `availableMoney`\n  availableMoney.textContent = \"0\";\n  availableMoney.classList.remove(\"options__balance--positive\", \"options__balance--negative\");\n}","import setFooterYear from \"./footer.js\";\nimport {loadFromStorage, renderTransactions} from \"./data/transactions.js\";\nimport {openTransactionPanel, closePanel} from \"./panel/transaction_panel.js\";\nimport {openConfirmationModal, closeConfirmationModal} from \"./modal/modal.js\";\nimport {switchToDarkMode, switchToLightMode} from \"./utils/color_mode.js\";\n \n// Root element\nexport let rootElement; \n// Footer year\nexport let footerYear;\n// Wallet icon\nexport let walletIcon;\n// Balance info (how much money is available)\nexport let availableMoney;\n// Lists of transactions\nexport let incomesList;\nexport let expensesList;\n// Buttons for transactions\nlet addTransactionBtn; \nlet deleteAllBtn;\n// Light and dark mode buttons\nlet lightCircle;\nlet darkCircle;\n// Transaction creation panel\nexport let transactionPanel;\nexport let nameInput;\nexport let amountInput;\nexport let categorySelect;\nlet closePanelXmark;\n// Transaction edition panel\nexport let editionPanel;\nexport let nameToEditInput;\nexport let amountToEditInput;\nexport let categoryToEditSelect;\nlet closeEditionPanelXmark; \n// Confirmation modal\nexport let confirmationModal;\nlet cancelDeletionButton;\n\nconst main = () => {\n  getElements();\n  addEventListeners();\n  setFooterYear();\n  loadFromStorage();\n  renderTransactions();\n}\n\nconst getElements = () => {\n  // Root element\n  rootElement = document.documentElement;\n  // Footer year\n  footerYear = document.querySelector(\".footer__year\");\n  // Wallet icon\n  walletIcon = document.querySelector(\".header__title-icon\");\n  // Balance info\n  availableMoney = document.querySelector(\".options__balance > span\");\n  // Lists of transactions\n  incomesList = document.querySelector(\".incomes-box__list\");\n  expensesList = document.querySelector(\".expenses-box__list\");\n  // Buttons for transactions\n  addTransactionBtn = document.querySelector(\".options__controls-btn--add\");\n  deleteAllBtn = document.querySelector(\".options__controls-btn--deleteAll\");\n  // Light and dark mode buttons\n  lightCircle = document.querySelector(\".options__style-button--light\");\n  darkCircle = document.querySelector(\".options__style-button--dark\");\n  // Transaction creation panel\n  transactionPanel = document.querySelector(\".transaction-panel--create\");\n  nameInput = transactionPanel.querySelector(\"#name\");\n  amountInput = transactionPanel.querySelector(\"#amount\");\n  categorySelect = transactionPanel.querySelector(\"#category\");\n  closePanelXmark = transactionPanel.querySelector(\".transaction-panel__xmark\");\n  // Transaction edition panel\n  editionPanel = document.querySelector(\".transaction-panel--edit\");\n  nameToEditInput = editionPanel.querySelector(\"#name-to-edit\");\n  amountToEditInput = editionPanel.querySelector(\"#amount-to-edit\");\n  categoryToEditSelect = editionPanel.querySelector(\"#category-to-edit\");\n  closeEditionPanelXmark = editionPanel.querySelector(\".transaction-panel__xmark\"); \n  // Confirmation modal\n  confirmationModal = document.querySelector(\".confirmation-modal\");\n  cancelDeletionButton = document.querySelector(\".confirmation-modal__button--cancel\");\n}\n\nconst addEventListeners = () => {\n  addTransactionBtn.addEventListener(\"click\", openTransactionPanel);\n  deleteAllBtn.addEventListener(\"click\", openConfirmationModal);\n  cancelDeletionButton.addEventListener(\"click\", closeConfirmationModal);\n  closePanelXmark.addEventListener(\"click\", () => closePanel(transactionPanel, [nameInput, amountInput, categorySelect]));\n  closeEditionPanelXmark.addEventListener(\"click\", () => closePanel(editionPanel, [nameToEditInput, amountToEditInput, categoryToEditSelect]));\n  lightCircle.addEventListener(\"click\", switchToLightMode); \n  darkCircle.addEventListener(\"click\", switchToDarkMode);\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", main);\n\n// const editTransaction = (transactionId) => {\n//   const currentIncomes = incomesBox.children;\n//   const currentExpenses = expensesBox.children;\n\n//   const transactionToEdit = document.getElementById(transactionId);\n//   const amountOfTransactionToEdit = parseFloat(transactionToEdit.childNodes[9].childNodes[1].innerText.slice(1));\n//   const indexOfTransactionToEdit = moneyArray.indexOf(amountOfTransactionToEdit);\n\n//   const currentNameOfTransaction = transactionToEdit.querySelector(\".transactions__item-name\");\n//   const currentAmountOfTransaction = transactionToEdit.querySelector(\".transactions__item-amount-text\");\n\n//   const newNameOfTransaction = nameToEditInput.value;\n//   const newAmountOfTransaction = parseFloat(amountToEditInput.value);\n\n//   checkCategory(categoryToEditSelect);\n\n//   currentNameOfTransaction.innerHTML = `${categoryIcon} ${newNameOfTransaction.charAt(0).toUpperCase() + newNameOfTransaction.slice(1)}`;\n//   currentAmountOfTransaction.innerHTML = `<i class=\"fa-solid fa-dollar-sign\"></i> ${newAmountOfTransaction}`;\n\n//   if (newAmountOfTransaction > 0) {\n//     const isExpense = Array.from(currentExpenses).includes(transactionToEdit);\n\n//     if (isExpense) {\n//       transactionToEdit.classList.remove(\"transactions__item--expense\");\n//       transactionToEdit.classList.add(\"transactions__item--income\");\n//       expensesBox.removeChild(transactionToEdit);\n//       incomesBox.appendChild(transactionToEdit);\n//     }\n//   } else {\n//     const isIncome = Array.from(currentIncomes).includes(transactionToEdit);\n\n//     if (isIncome) {\n//       transactionToEdit.classList.remove(\"transactions__item--income\");\n//       transactionToEdit.classList.add(\"transactions__item--expense\");\n//       incomesBox.removeChild(transactionToEdit);\n//       expensesBox.appendChild(transactionToEdit);\n//     }\n//   }\n\n//   moneyArray[indexOfTransactionToEdit] = newAmountOfTransaction;\n//   calculateBalance(moneyArray);\n// } ","import {availableMoney} from \"../main.js\";\r\n\r\nconst calculateBalance = (moneyArray) => {\r\n  // Calculate the sum of all the transaction amounts\r\n  let balance = moneyArray.reduce((accumulator, currentValue) => {\r\n    return accumulator + parseFloat(currentValue.amount);\r\n  }, 0);\r\n  // Round the balance to two decimal places and then convert it to a number\r\n  balance = parseFloat(balance.toFixed(2));\r\n  // Format the balance to a string\r\n  const formattedBalance = balance.toString();\r\n  // Set the balance in the DOM\r\n  availableMoney.textContent = formattedBalance;\r\n  // Remove the classes that identify the balance as positive or negative in case balance is 0\r\n  availableMoney.classList.remove(\"options__balance--positive\", \"options__balance--negative\");\r\n  // Otherwise add the class that identifies the balance as positive or negative\r\n  if (balance > 0) {\r\n    availableMoney.classList.add(\"options__balance--positive\");\r\n  } else if (balance < 0) {\r\n    availableMoney.classList.add(\"options__balance--negative\");\r\n  }\r\n}\r\n\r\nexport default calculateBalance;","import {confirmationModal} from \"../main.js\";\r\nimport {deleteAllTransactions} from \"../data/transactions.js\";\r\n\r\nexport const openConfirmationModal = () => {\r\n  confirmationModal.classList.add(\"confirmation-modal--open\");\r\n  confirmationModal.querySelector(\".confirmation-modal__button--confirm\").removeEventListener(\"click\", deleteAllTransactions);\r\n  confirmationModal.querySelector(\".confirmation-modal__button--confirm\").addEventListener(\"click\", deleteAllTransactions);\r\n}\r\n\r\nexport const closeConfirmationModal = () => {\r\n  confirmationModal.classList.remove(\"confirmation-modal--open\");\r\n}","import {rootElement, walletIcon} from \"../main.js\";\r\n\r\nexport const switchToLightMode = () => {\r\n  rootElement.style.setProperty(\"--darkColor\", \"#f0ebd8\");\r\n  rootElement.style.setProperty(\"--lightColor\", \"#0d1321\");\r\n  walletIcon.style.setProperty(\"stroke\", \"#0d1321\");\r\n}\r\n\r\nexport const switchToDarkMode = () => {\r\n  rootElement.style.setProperty(\"--darkColor\", \"#0d1321\");\r\n  rootElement.style.setProperty(\"--lightColor\", \"#f0ebd8\");\r\n  walletIcon.style.setProperty(\"stroke\", \"#f0ebd8\");\r\n};","import { footerYear } from \"./main.js\";\r\n\r\nconst setFooterYear = () => {\r\n  const now = new Date();\r\n  footerYear.textContent = now.getFullYear();\r\n}\r\n\r\nexport default setFooterYear;"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","getCategoryIcon","selectedCategory","console","warn","concat","openTransactionPanel","inputs","nameInput","amountInput","categorySelect","transactionPanel","classList","add","querySelector","focus","addEventListener","event","createNewTransaction","closePanel","panel","forEach","input","value","remove","selectedIndex","clearInputs","closest","clearErrors","inputValue","trim","charAt","toUpperCase","slice","toLowerCase","displayError","formControl","errorMessage","error","textContent","removeError","preventDefault","_inputs","options","minLength","maxLength","length","formatInputName","id","checkName","amount","parseFloat","isNaN","startsWith","checkAmount","checkCategory","some","contains","checkForErrors","Math","round","toFixed","transactionId","matchingTransaction","moneyArray","transaction","index","indexOf","rootElement","footerYear","walletIcon","availableMoney","incomesList","expensesList","addTransactionBtn","deleteAllBtn","lightCircle","darkCircle","closePanelXmark","editionPanel","nameToEditInput","amountToEditInput","categoryToEditSelect","closeEditionPanelXmark","confirmationModal","cancelDeletionButton","saveToStorage","localStorage","setItem","JSON","stringify","loadFromStorage","storedAmounts","getItem","parse","renderTransactions","clearStuff","listItem","document","createElement","transactionContainer","dataset","transactionElement","content","cloneNode","innerHTML","categoryIcon","name","log","transactionName","transactionAmount","transactionCategory","transactionIcon","getCategoryByIcon","editTransaction","openEditionPanel","deleteTransaction","appendChild","balance","reduce","accumulator","currentValue","formattedBalance","toString","calculateBalance","handleFormSubmit","_slicedToArray","nameFormatted","amountFormatted","formatCurrency","push","_inputs2","newTransaction","matchingTransactionIndex","getTransactionIndex","splice","deleteAllTransactions","openConfirmationModal","removeEventListener","closeConfirmationModal","switchToLightMode","style","setProperty","switchToDarkMode","now","documentElement","Date","getFullYear"],"sourceRoot":""}