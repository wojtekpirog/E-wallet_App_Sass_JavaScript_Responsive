{"version":3,"file":"bundle.min.js","mappings":"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","sources":["webpack://e-wallet_app/webpack/bootstrap","webpack://e-wallet_app/webpack/runtime/define property getters","webpack://e-wallet_app/webpack/runtime/hasOwnProperty shorthand","webpack://e-wallet_app/./src/js/footer.js","webpack://e-wallet_app/./src/js/utils/balance.js","webpack://e-wallet_app/./src/js/utils/category.js","webpack://e-wallet_app/./src/js/utils/input_name.js","webpack://e-wallet_app/./src/js/utils/money.js","webpack://e-wallet_app/./src/js/data/transactions.js","webpack://e-wallet_app/./src/js/panel/edition_panel.js","webpack://e-wallet_app/./src/js/panel/form_validation.js","webpack://e-wallet_app/./src/js/panel/creation_panel.js","webpack://e-wallet_app/./src/js/main.js","webpack://e-wallet_app/./src/js/modal/modal.js","webpack://e-wallet_app/./src/js/utils/color_mode.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { footerYear } from \"./main.js\";\r\n\r\nconst setFooterYear = () => {\r\n  const now = new Date();\r\n  footerYear.textContent = now.getFullYear();\r\n}\r\n\r\nexport default setFooterYear;","import {moneyArray, availableMoney} from \"../main.js\";\r\n\r\nfunction calculateBalance(moneyArray) {\r\n  const balance = moneyArray.reduce((accumulator, currentValue) => accumulator + currentValue);\r\n\r\n  if (balance > 0) {\r\n    availableMoney.classList.add(\"options__balance--positive\");\r\n    availableMoney.classList.remove(\"options__balance--negative\");\r\n  } else if (balance === 0) {\r\n    availableMoney.classList.remove(\"options__balance--positive\", \"options__balance--negative\");\r\n  } else {\r\n    availableMoney.classList.add(\"options__balance--negative\");\r\n    availableMoney.classList.remove(\"options__balance--positive\");\r\n  }\r\n\r\n  availableMoney.textContent = balance;\r\n}\r\n\r\nexport default calculateBalance;","import {categorySelect, categoryIcon} from \"../main.js\";\r\n\r\nconst checkCategory = (categorySelect) => {\r\n  switch (categorySelect.value) {\r\n    case \"salary\":\r\n      categoryIcon = `<i class=\"fa-solid fa-wallet\"></i>`;\r\n      break;\r\n    case \"investment\":\r\n      categoryIcon = `<i class=\"fa-solid fa-chart-line\"></i>`;\r\n      break;\r\n    case \"freelance\":\r\n      categoryIcon = `<i class=\"fa-solid fa-briefcase\"></i>`;\r\n      break;\r\n    case \"rent\":\r\n      categoryIcon = `<i class=\"fa-solid fa-house\"></i>`;\r\n      break;\r\n    case \"shopping\":\r\n      categoryIcon = `<i class=\"fa-solid fa-cart-shopping\"></i>`;\r\n      break;\r\n    case \"food\":\r\n      categoryIcon = `<i class=\"fa-solid fa-utensils\"></i>`;\r\n      break;\r\n    case \"bills\":\r\n      categoryIcon = `<i class=\"fa-solid fa-credit-card\"></i>`;\r\n      break;\r\n    case \"cinema\":\r\n      categoryIcon = `<i class=\"fa-solid fa-film\"></i>`;\r\n      break;\r\n    case \"leisure\":\r\n      categoryIcon = `<i class=\"fa-solid fa-glass-cheers\"></i>`;\r\n      break;\r\n    case \"other\":\r\n      categoryIcon = `<i class=\"fa-solid fa-pen\"></i>`;\r\n      break;\r\n  }\r\n};\r\n\r\nexport default checkCategory;","function formatInputName(inputValue) {\r\n  return inputValue.trim().charAt(0).toUpperCase() + inputValue.trim().slice(1).toLowerCase();\r\n}\r\n\r\nexport default formatInputName;","const formatCurrency = (amount) => {\r\n  // Turn the value of `amountInput` into an amount in cents\r\n  amount = Math.round(parseFloat(amount) * 100);\r\n  // Format the amount in cents into the monetary value\r\n  return (Math.round(amount) / 100).toFixed(2);\r\n} \r\n\r\nexport default formatCurrency;","import {transactionId, moneyArray, availableMoney, categoryIcon, incomesList, expensesList, nameInput, amountInput, categorySelect, confirmationModal} from \"../main.js\";\r\nimport {openEditionPanel} from \"../panel/edition_panel.js\";\r\nimport checkCategory from \"../utils/category.js\";\r\nimport formatInputName from \"../utils/input_name.js\";\r\nimport formatCurrency from \"../utils/money.js\";\r\nimport calculateBalance from \"../utils/balance.js\";\r\n\r\nexport const createNewTransaction = () => {\r\n  const newTransaction = document.createElement(\"li\");\r\n  newTransaction.id = transactionId;\r\n  // Return category icon based on selected category\r\n  checkCategory(categorySelect);\r\n  // Return the monetary value of the transaction\r\n  const amountFormatted = formatCurrency(amountInput.value);\r\n\r\n  const transactionItem = document.querySelector(\".transaction__template\").content.cloneNode(true);\r\n  transactionItem.querySelector(\".transactions__item-name\").innerHTML = `${categoryIcon} ${formatInputName(nameInput.value)}`;\r\n  transactionItem.querySelector(\".transactions__item-amount-text\").innerHTML = `<i class=\"fa-solid fa-dollar-sign\"></i> ${amountFormatted}`;\r\n  transactionItem.querySelector(\".transactions__item-amount-button--edit\").addEventListener(\"click\", (event) => openEditionPanel(event));\r\n  transactionItem.querySelector(\".transactions__item-amount-button--delete\").addEventListener(\"click\", (event) => deleteTransaction(event, amountFormatted));\r\n  newTransaction.appendChild(transactionItem);\r\n\r\n  // If amount is positive, add a new income, otherwise add a new expense\r\n  if (amountInput.value > 0) {\r\n    newTransaction.classList.add(\"transactions__item\", \"transactions__item--income\");\r\n    incomesList.appendChild(newTransaction);\r\n  } else {\r\n    newTransaction.classList.add(\"transactions__item\", \"transactions__item--expense\");\r\n    expensesList.appendChild(newTransaction);\r\n  }\r\n\r\n  transactionId++;\r\n  moneyArray.push(parseFloat(amountFormatted));\r\n  calculateBalance(moneyArray);\r\n}\r\n\r\nexport const editTransaction = (event, transaction, {panel, nameInput, amountInput, categorySelect}) => {\r\n  event.preventDefault(); \r\n  // Return category icon based on selected category\r\n  checkCategory(categorySelect);\r\n  // Return the monetary value of the transaction\r\n  const amountFormatted = formatCurrency(amountInput.value);\r\n  // Set the new transaction name and transaction category icon\r\n  transaction.querySelector(\".transactions__item-name\").innerHTML = `${categoryIcon} ${formatInputName(nameInput.value)}`;\r\n  // Set the new transaction amount\r\n  transaction.querySelector(\".transactions__item-amount-text\").innerHTML = `<i class=\"fa-solid fa-dollar-sign\"></i> ${amountFormatted}`;\r\n}\r\n\r\nconst deleteTransaction = (event, amountFormatted) => {\r\n  const transactionToDelete = event.target.closest(\".transactions__item\");\r\n  const amountToDelete = parseFloat(amountFormatted);\r\n  const transactionIndex = moneyArray.indexOf(amountToDelete)\r\n\r\n  transactionToDelete.classList.contains(\"transactions__item--income\")\r\n    ? incomesList.removeChild(transactionToDelete)\r\n    : expensesList.removeChild(transactionToDelete);\r\n\r\n  moneyArray.splice(transactionIndex, 1);\r\n  calculateBalance(moneyArray);  \r\n}\r\n\r\nexport const deleteAllTransactions = () => {\r\n  incomesList.innerHTML = \"\";\r\n  expensesList.innerHTML = \"\";\r\n  moneyArray = [0];\r\n  availableMoney.textContent = \"0\";\r\n  availableMoney.style.color = \"#f0ebd8\";\r\n  confirmationModal.classList.remove(\"confirmation-modal--open\");\r\n}","import {editionPanel, nameToEditInput, amountToEditInput, categoryToEditSelect} from \"../main.js\";\r\nimport {editTransaction} from \"../data/transactions.js\";\r\n\r\nexport const openEditionPanel = (event) => {\r\n  // Get the transaction and its details\r\n  const transaction = event.target.closest(\".transactions__item\");\r\n  const transactionName = transaction.querySelector(\".transactions__item-name\").textContent.trim();\r\n  const transactionAmount = transaction.querySelector(\".transactions__item-amount-text\").textContent.trim();\r\n  // Show the edition panel\r\n  editionPanel.classList.add(\"transaction-panel--open\");\r\n  // Put focus on the name input\r\n  editionPanel.querySelector(\".transaction-panel__input--name\").focus();\r\n  // Fill the inputs with values from `transactionName` and `transactionAmount`\r\n  editionPanel.querySelector(\".transaction-panel__input--name\").value = transactionName;\r\n  editionPanel.querySelector(\".transaction-panel__input--amount\").value = transactionAmount;\r\n  // Add event listeners on the `Apply` and `Cancel` buttons\r\n  editionPanel.querySelector(\".transaction-panel__button--edit\").addEventListener(\"click\", (event) => editTransaction(event, transaction, {panel: editionPanel, nameInput: nameToEditInput, amountInput: amountToEditInput, categorySelect: categoryToEditSelect}));\r\n  editionPanel.querySelector(\".transaction-panel__button--cancel\").addEventListener(\"click\", () => closeEditionPanel(editionPanel));\r\n}\r\n\r\nconst closeEditionPanel = (editionPanel) => {\r\n  editionPanel.classList.remove(\"transaction-panel--open\");\r\n}","// import {transactionId} from \"../main.js\";\r\nimport {closeTransactionPanel} from \"./creation_panel.js\";\r\nimport {createNewTransaction, editTransaction} from \"../data/transactions.js\";\r\nimport formatInputName from \"../utils/input_name.js\";\r\n\r\nconst handleFormSubmit = (event, {panel, nameInput, amountInput, categorySelect}, transactionId) => {\r\n  event.preventDefault();\r\n  \r\n  checkName(nameInput);\r\n  checkAmount(amountInput);\r\n  checkSelect(categorySelect);\r\n\r\n  const inputs = [nameInput, amountInput, categorySelect];\r\n  checkForErrors(panel, inputs, transactionId);\r\n}\r\n\r\nconst checkName = (nameInput) => {\r\n  const minLength = nameInput.minLength;\r\n  const maxLength = nameInput.maxLength;\r\n\r\n  if (!nameInput.value) {\r\n    displayError(nameInput, `${formatInputName(nameInput.id)} must be provided.`);\r\n  } else if (nameInput.value.length < minLength || nameInput.value.length > maxLength) {\r\n    displayError(nameInput, `${formatInputName(nameInput.id)} must be between ${minLength} and ${maxLength} characters long.`);\r\n  } else {\r\n    removeError(nameInput);\r\n  }\r\n}\r\n\r\nconst checkAmount = (amountInput) => {\r\n  const amount = parseFloat(amountInput.value);\r\n\r\n  if (isNaN(amount)) {\r\n    displayError(amountInput, `${formatInputName(amountInput.id)} must be provided.`);\r\n  } else if (amount === 0) {\r\n    displayError(amountInput, `${formatInputName(amountInput.id)} cannot be equal to zero.`);\r\n  } else {\r\n    removeError(amountInput);\r\n  }\r\n}\r\n\r\nconst checkSelect = (categorySelect) => {\r\n  categorySelect.value === \"none\"\r\n    ? displayError(categorySelect, `${formatInputName(categorySelect.id)} must be selected.`)\r\n    : removeError(categorySelect);\r\n}\r\n\r\nconst displayError = (formControl, errorMessage) => {\r\n  const error = formControl.closest(\".transaction-panel__control-box\").querySelector(\".transaction-panel__error\");\r\n  error.classList.add(\"transaction-panel__error--active\");\r\n  error.textContent = errorMessage;\r\n  formControl.classList.add(\"transaction-panel__input--error\");\r\n}\r\n\r\nconst removeError = (formControl) => {\r\n  const error = formControl.closest(\".transaction-panel__control-box\").querySelector(\".transaction-panel__error\");\r\n  error.classList.remove(\"transaction-panel__error--active\");\r\n  error.textContent = \"\";\r\n  formControl.classList.remove(\"transaction-panel__input--error\");\r\n}\r\n\r\nconst checkForErrors = (panel, inputs, transactionId) => {\r\n  let hasErrors = false;\r\n\r\n  inputs.forEach((input) => {\r\n    input.classList.contains(\"transaction-panel__input--error\") \r\n      ? hasErrors = true\r\n      : hasErrors = false;\r\n  });\r\n\r\n  if (!hasErrors) {\r\n    if (panel.classList.contains(\"transaction-panel--create\")) {\r\n      createNewTransaction();\r\n    } else if (panel.classList.contains(\"transaction-panel--edit\")) {\r\n      editTransaction(transactionId);\r\n    }\r\n\r\n    clearInputs(inputs);\r\n    clearErrors(inputs);\r\n    closeTransactionPanel(panel);\r\n  }\r\n}\r\n\r\nexport const clearInputs = (inputs) => {\r\n  inputs.forEach((input) => {\r\n    input.value = \"\";\r\n    input.classList.remove(\"transaction-panel__input--error\");\r\n  });\r\n\r\n  inputs[2].selectedIndex = 0;\r\n}\r\n\r\nexport const clearErrors = (inputs) => {\r\n  // document.querySelectorAll(\".transaction-panel__error\").forEach(error => error.style.display = \"none\");\r\n  inputs.forEach((input) => {\r\n    input.classList.remove(\"transaction-panel__input--error\");\r\n    input.closest(\".transaction-panel__control-box\").querySelector(\".transaction-panel__error\").classList.remove(\"transaction-panel__error--active\");\r\n  });\r\n}\r\n\r\nexport default handleFormSubmit;","import {transactionPanel, nameInput, amountInput, categorySelect} from \"../main.js\";\r\nimport handleFormSubmit from \"./form_validation.js\";\r\n\r\nexport const openTransactionPanel = () => {\r\n  // Show the transaction panel\r\n  transactionPanel.classList.add(\"transaction-panel--open\");\r\n  // Put focus on the name input\r\n  transactionPanel.querySelector(\".transaction-panel__input--name\").focus();\r\n  // Add event listeners on the `Save` and `Cancel` buttons\r\n  transactionPanel.querySelector(\".transaction-panel__button--save\").addEventListener(\"click\", (event) => handleFormSubmit(event, {panel: transactionPanel, nameInput: nameInput, amountInput: amountInput, categorySelect: categorySelect}));\r\n  transactionPanel.querySelector(\".transaction-panel__button--cancel\").addEventListener(\"click\", () => closeTransactionPanel(transactionPanel));\r\n}\r\n\r\nexport const closeTransactionPanel = (transactionPanel) => {\r\n  transactionPanel.classList.remove(\"transaction-panel--open\");\r\n}","import setFooterYear from \"./footer.js\";\nimport calculateBalance from \"./utils/balance.js\";\nimport checkCategory from \"./utils/category.js\";\nimport {openTransactionPanel, closeTransactionPanel} from \"./panel/creation_panel.js\";\nimport {openConfirmationModal, closeConfirmationModal} from \"./modal/modal.js\";\nimport {switchToDarkMode, switchToLightMode} from \"./utils/color_mode.js\";\n\n// Root element\nexport let rootElement; \n// Footer year\nexport let footerYear;\n// Wallet icon\nexport let walletIcon;\n// Lists of transactions\nexport let incomesList;\nexport let expensesList;\n// Category icon\nexport let categoryIcon;  \n// Buttons for transactions\nlet addTransactionBtn; \nlet deleteTransactionBtn;\nlet deleteAllBtn;\n// Light and dark mode buttons\nlet lightCircle;\nlet darkCircle;\n// Transaction creation panel\nexport let transactionPanel;\nexport let nameInput;\nexport let amountInput;\nexport let categorySelect;\nlet saveBtn;\nlet cancelBtn;\nlet closePanelBtn;\n// Transaction edition panel\nexport let editionPanel;\nexport let nameToEditInput;\nexport let amountToEditInput;\nexport let categoryToEditSelect;\nlet saveEditionBtn;\nlet cancelEditionBtn;\nlet closeEditionPanelBtn;\n// Confirmation modal\nexport let confirmationModal;\nlet cancelDeletionButton;\n// Edition modal\nlet editionModal;\n\n// Transaction ID\nexport let transactionId = 0;\n// Amounts array\nexport let moneyArray = [0];\n// Balance info (how much money is available)\nexport let availableMoney;\n\nconst main = () => {\n  getElements();\n  addEventListeners();\n  setFooterYear(); \n}\n\nconst getElements = () => {\n  // Root element\n  rootElement = document.documentElement;\n  // Footer year\n  footerYear = document.querySelector(\".footer__year\");\n  // Wallet icon\n  walletIcon = document.querySelector(\".header__title-icon\");\n  // Balance info\n  availableMoney = document.querySelector(\".options__balance > span\");\n  // Lists of transactions\n  incomesList = document.querySelector(\".incomes-box__list\");\n  expensesList = document.querySelector(\".expenses-box__list\");\n  // Buttons for transactions\n  addTransactionBtn = document.querySelector(\".options__controls-btn--add\");\n  deleteTransactionBtn = document.querySelector(\".incomes-box__item-amount-btn\");\n  deleteAllBtn = document.querySelector(\".options__controls-btn--deleteAll\");\n  // Light and dark mode buttons\n  lightCircle = document.querySelector(\".options__style-button--light\");\n  darkCircle = document.querySelector(\".options__style-button--dark\");\n  // Transaction creation panel\n  transactionPanel = document.querySelector(\".transaction-panel--create\");\n  nameInput = transactionPanel.querySelector(\"#name\");\n  amountInput = transactionPanel.querySelector(\"#amount\");\n  categorySelect = transactionPanel.querySelector(\"#category\");\n  closePanelBtn = transactionPanel.querySelector(\".transaction-panel__xmark\");\n  // Transaction edition panel\n  editionPanel = document.querySelector(\".transaction-panel--edit\");\n  nameToEditInput = editionPanel.querySelector(\"#name-to-edit\");\n  amountToEditInput = editionPanel.querySelector(\"#amount-to-edit\");\n  categoryToEditSelect = editionPanel.querySelector(\"#category-to-edit\");\n  closeEditionPanelBtn = editionPanel.querySelector(\".transaction-panel__xmark\"); \n  // Confirmation modal\n  confirmationModal = document.querySelector(\".confirmation-modal\");\n  cancelDeletionButton = document.querySelector(\".confirmation-modal__button--cancel\");\n  // Edition modal\n  editionModal = document.querySelector(\".edition-modal\");\n} \n\nconst addEventListeners = () => {\n  addTransactionBtn.addEventListener(\"click\", openTransactionPanel);\n  deleteAllBtn.addEventListener(\"click\", openConfirmationModal);\n  cancelDeletionButton.addEventListener(\"click\", closeConfirmationModal);\n  closePanelBtn.addEventListener(\"click\", () => closeTransactionPanel(transactionPanel));\n  closeEditionPanelBtn.addEventListener(\"click\", () => closeTransactionPanel(editionPanel));\n  lightCircle.addEventListener(\"click\", switchToLightMode); \n  darkCircle.addEventListener(\"click\", switchToDarkMode);\n}\n\nconst editTransaction = (transactionId) => {\n  const currentIncomes = incomesBox.children;\n  const currentExpenses = expensesBox.children;\n\n  const transactionToEdit = document.getElementById(transactionId);\n  const amountOfTransactionToEdit = parseFloat(transactionToEdit.childNodes[9].childNodes[1].innerText.slice(1));\n  const indexOfTransactionToEdit = moneyArray.indexOf(amountOfTransactionToEdit);\n\n  const currentNameOfTransaction = transactionToEdit.querySelector(\".transactions__item-name\");\n  const currentAmountOfTransaction = transactionToEdit.querySelector(\".transactions__item-amount-text\");\n\n  const newNameOfTransaction = nameToEditInput.value;\n  const newAmountOfTransaction = parseFloat(amountToEditInput.value);\n\n  checkCategory(categoryToEditSelect);\n\n  currentNameOfTransaction.innerHTML = `${categoryIcon} ${newNameOfTransaction.charAt(0).toUpperCase() + newNameOfTransaction.slice(1)}`;\n  currentAmountOfTransaction.innerHTML = `<i class=\"fa-solid fa-dollar-sign\"></i> ${newAmountOfTransaction}`;\n\n  if (newAmountOfTransaction > 0) {\n    const isExpense = Array.from(currentExpenses).includes(transactionToEdit);\n\n    if (isExpense) {\n      transactionToEdit.classList.remove(\"transactions__item--expense\");\n      transactionToEdit.classList.add(\"transactions__item--income\");\n      expensesBox.removeChild(transactionToEdit);\n      incomesBox.appendChild(transactionToEdit);\n    }\n  } else {\n    const isIncome = Array.from(currentIncomes).includes(transactionToEdit);\n\n    if (isIncome) {\n      transactionToEdit.classList.remove(\"transactions__item--income\");\n      transactionToEdit.classList.add(\"transactions__item--expense\");\n      incomesBox.removeChild(transactionToEdit);\n      expensesBox.appendChild(transactionToEdit);\n    }\n  }\n\n  moneyArray[indexOfTransactionToEdit] = newAmountOfTransaction;\n  calculateBalance(moneyArray);\n}\n  \n// const closeTransactionPanel = (name, amount, category, categoryArrow, panel) => {\n//   clearElements(name, amount, category, categoryArrow);\n//   clearErrors(); \n//   panel.classList.remove(\"active\");\n// }\n\n// const clearElements = (name, amount, category, categoryArrow) => {\n  // name.value = \"\";\n  // name.classList.remove(\"transaction-panel__input--error\");\n  // amount.value = \"\";\n  // amount.classList.remove(\"transaction-panel__input--error\");\n  // category.selectedIndex = 0;\n  // category.classList.remove(\"transaction-panel__input--error\");\n  // categoryArrow.classList.remove(\"transaction-panel__arrow--error\");\n// }\n\n// const handleFormSubmit = (event, name, amount, category, panel, transactionId) => {\n//   event.preventDefault(); \n\n//   validateInputs([name, amount]);\n//   validateSelect(category);\n//   checkLength(name);\n//   checkForErrors(event, name, amount, category, panel, transactionId);\n// }\n\n// const validateInputs = (inputs) => {\n//   inputs.forEach((input) => {\n//     if (input.value === \"\") {\n//       displayError(input, `${input.id.charAt(0).toUpperCase() + input.id.slice(1)} cannot be empty!`);\n//     } else if (input.value === \"0\") {\n//       displayError(input, `${input.id.charAt(0).toUpperCase() + input.id.slice(1)} cannot be equal to zero!`);\n//     } else {\n//       removeError(input);\n//     }\n//   });\n// }\n\n// const validateSelect = (categorySelect) => {\n//   if (categorySelect.value === \"none\") {\n//     displayError(categorySelect, `${categorySelect.id.charAt(0).toUpperCase() + categorySelect.id.slice(1)} must be selected!`);\n//   } else {\n//     removeError(categorySelect);\n//   }\n// }\n\n// const checkLength = (nameInput) => {\n//   if (nameInput.value.length < nameInput.minLength || nameInput.value.length > nameInput.maxLength) {\n//     displayError(nameInput, `${nameInput.id.charAt(0).toUpperCase() + nameInput.id.slice(1)} must be between ${nameInput.minLength} and ${nameInput.maxLength} characters!`);\n//   } else {\n//     removeError(nameInput);\n//   }\n// }\n\n// const checkForErrors = (event, name, amount, category, panel, transactionId) => {\n//   const editTransactionBtn = editTransactionPanel.querySelector(\".transaction-panel__button--edit\");\n//   const checkIcon = editTransactionPanel.querySelector(\"i.fa-solid.fa-check\");\n\n//   if (name.value !== \"\" && name.value.length >= name.minLength && name.value.length <= name.maxLength && name.value !== \"0\" && amount.value !== \"\" && amount.value !== \"0\" && category.value !== \"none\") {\n//     if (event.target === editTransactionBtn || event.target === checkIcon) {\n//       editTransaction(transactionId);\n//       closeTransactionPanel(nameToEditInput, amountToEditInput, categoryToEditSelect, categoryToEditSelectArrow, panel);\n//     } else {\n//       createNewTransaction();\n//       closeTransactionPanel(nameInput, amountInput, categorySelect, categorySelectArrow, panel);\n//     }\n//   }\n// }\n\n// const createNewTransaction = () => {\n//   const newTransaction = document.createElement(\"div\");\n//   newTransaction.id = transactionId;\n//   checkCategory(categorySelect);\n\n//   transactionTemplate = transactionTemplate.content.cloneNode(true);\n//   transactionTemplate.querySelector(\".transactions__item-name\").innerHTML = `${categoryIcon} ${formatInputName(nameInput.value)}`;\n//   transactionTemplate.querySelector(\".transactions__item-amount-text\").innerHTML = `<i class=\"fa-solid fa-dollar-sign\"></i> ${amountInput.value}`;\n//   transactionTemplate.querySelector(\".transactions__item-amount-button--edit\").setAttribute(\"onclick\", `openEditionPanel(${transactionId})`);\n//   transactionTemplate.querySelector(\".transactions__item-amount-button--delete\").setAttribute(\"onclick\", `deleteTransaction(${transactionId})`);\n//   newTransaction.appendChild(transactionTemplate);\n\n//   if (amountInput.value > 0) {\n//     newTransaction.classList.add(\"transactions__item\", \"transactions__item--income\");\n//     incomesBox.appendChild(newTransaction);\n//   } else {\n//     newTransaction.classList.add(\"transactions__item\", \"transactions__item--expense\");\n//     expensesBox.appendChild(newTransaction);\n//   }\n\n//   transactionId++;\n//   moneyArray.push(parseFloat(amountInput.value));\n//   calculateBalance(moneyArray);\n// } \n\nwindow.addEventListener(\"DOMContentLoaded\", main);","import {confirmationModal} from \"../main.js\";\r\nimport {deleteAllTransactions} from \"../data/transactions.js\";\r\n\r\nexport const openConfirmationModal = () => {\r\n  confirmationModal.classList.add(\"confirmation-modal--open\");\r\n  confirmationModal.querySelector(\".confirmation-modal__button--confirm\").removeEventListener(\"click\", deleteAllTransactions);\r\n  confirmationModal.querySelector(\".confirmation-modal__button--confirm\").addEventListener(\"click\", deleteAllTransactions);\r\n}\r\n\r\nexport const closeConfirmationModal = () => {\r\n  confirmationModal.classList.remove(\"confirmation-modal--open\");\r\n}","import {rootElement, walletIcon} from \"../main.js\";\r\n\r\nexport const switchToLightMode = () => {\r\n  rootElement.style.setProperty(\"--darkColor\", \"#f0ebd8\");\r\n  rootElement.style.setProperty(\"--lightColor\", \"#0d1321\");\r\n  walletIcon.style.setProperty(\"stroke\", \"#0d1321\");\r\n}\r\n\r\nexport const switchToDarkMode = () => {\r\n  rootElement.style.setProperty(\"--darkColor\", \"#0d1321\");\r\n  rootElement.style.setProperty(\"--lightColor\", \"#f0ebd8\");\r\n  walletIcon.style.setProperty(\"stroke\", \"#f0ebd8\");\r\n};"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","moneyArray","balance","reduce","accumulator","currentValue","availableMoney","classList","add","remove","textContent","categorySelect","value","categoryIcon","inputValue","trim","charAt","toUpperCase","slice","toLowerCase","amount","Math","round","parseFloat","toFixed","createNewTransaction","newTransaction","document","createElement","id","transactionId","checkCategory","amountFormatted","formatCurrency","amountInput","transactionItem","querySelector","content","cloneNode","innerHTML","concat","formatInputName","nameInput","addEventListener","event","transaction","target","closest","transactionName","transactionAmount","editionPanel","focus","editTransaction","panel","nameToEditInput","amountToEditInput","categoryToEditSelect","closeEditionPanel","openEditionPanel","deleteTransaction","appendChild","incomesList","expensesList","push","calculateBalance","_ref","preventDefault","transactionToDelete","amountToDelete","transactionIndex","indexOf","contains","removeChild","splice","deleteAllTransactions","style","color","confirmationModal","displayError","formControl","errorMessage","error","removeError","clearInputs","inputs","forEach","input","selectedIndex","clearErrors","minLength","maxLength","length","checkName","isNaN","checkAmount","checkSelect","hasErrors","closeTransactionPanel","checkForErrors","rootElement","footerYear","walletIcon","addTransactionBtn","deleteAllBtn","lightCircle","darkCircle","transactionPanel","closePanelBtn","closeEditionPanelBtn","cancelDeletionButton","openTransactionPanel","handleFormSubmit","openConfirmationModal","removeEventListener","closeConfirmationModal","switchToLightMode","setProperty","switchToDarkMode","window","now","documentElement","Date","getFullYear"],"sourceRoot":""}