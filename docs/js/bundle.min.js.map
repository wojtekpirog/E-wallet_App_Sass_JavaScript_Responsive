{"version":3,"file":"bundle.min.js","mappings":"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","sources":["webpack://e-wallet_app/webpack/bootstrap","webpack://e-wallet_app/webpack/runtime/define property getters","webpack://e-wallet_app/webpack/runtime/hasOwnProperty shorthand","webpack://e-wallet_app/./src/js/footer.js","webpack://e-wallet_app/./src/js/utils/category.js","webpack://e-wallet_app/./src/js/utils/input_name.js","webpack://e-wallet_app/./src/js/utils/money.js","webpack://e-wallet_app/./src/js/utils/balance.js","webpack://e-wallet_app/./src/js/data/transactions.js","webpack://e-wallet_app/./src/js/panel/form_validation.js","webpack://e-wallet_app/./src/js/panel/transaction_panel.js","webpack://e-wallet_app/./src/js/main.js","webpack://e-wallet_app/./src/js/modal/modal.js","webpack://e-wallet_app/./src/js/utils/color_mode.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { footerYear } from \"./main.js\";\r\n\r\nconst setFooterYear = () => {\r\n  const now = new Date();\r\n  footerYear.textContent = now.getFullYear();\r\n}\r\n\r\nexport default setFooterYear;","import {categorySelect, categoryIcon} from \"../main.js\";\r\n\r\nconst checkCategory = (categorySelect) => {\r\n  switch (categorySelect.value) {\r\n    case \"salary\":\r\n      categoryIcon = `<i class=\"fa-solid fa-wallet\"></i>`;\r\n      break;\r\n    case \"investment\":\r\n      categoryIcon = `<i class=\"fa-solid fa-chart-line\"></i>`;\r\n      break;\r\n    case \"freelance\":\r\n      categoryIcon = `<i class=\"fa-solid fa-briefcase\"></i>`;\r\n      break;\r\n    case \"rent\":\r\n      categoryIcon = `<i class=\"fa-solid fa-house\"></i>`;\r\n      break;\r\n    case \"shopping\":\r\n      categoryIcon = `<i class=\"fa-solid fa-cart-shopping\"></i>`;\r\n      break;\r\n    case \"food\":\r\n      categoryIcon = `<i class=\"fa-solid fa-utensils\"></i>`;\r\n      break;\r\n    case \"bills\":\r\n      categoryIcon = `<i class=\"fa-solid fa-credit-card\"></i>`;\r\n      break;\r\n    case \"cinema\":\r\n      categoryIcon = `<i class=\"fa-solid fa-film\"></i>`;\r\n      break;\r\n    case \"leisure\":\r\n      categoryIcon = `<i class=\"fa-solid fa-glass-cheers\"></i>`;\r\n      break;\r\n    case \"other\":\r\n      categoryIcon = `<i class=\"fa-solid fa-pen\"></i>`;\r\n      break;\r\n  }\r\n};\r\n\r\nexport default checkCategory;","function formatInputName(inputValue) {\r\n  return inputValue.trim().charAt(0).toUpperCase() + inputValue.trim().slice(1).toLowerCase();\r\n}\r\n\r\nexport default formatInputName;","const formatCurrency = (amount) => {\r\n  // Turn the value of `amountInput` into an amount in cents\r\n  amount = Math.round(parseFloat(amount) * 100);\r\n  // Format the amount in cents into the monetary value\r\n  return (Math.round(amount) / 100).toFixed(2);\r\n} \r\n\r\nexport default formatCurrency;","import {availableMoney} from \"../main.js\";\r\n\r\nfunction calculateBalance(moneyArray) {\r\n  const balance = moneyArray.reduce((accumulator, currentValue) => accumulator + currentValue);\r\n\r\n  if (balance > 0) {\r\n    availableMoney.classList.add(\"options__balance--positive\");\r\n    availableMoney.classList.remove(\"options__balance--negative\");\r\n  } else if (balance === 0) {\r\n    availableMoney.classList.remove(\"options__balance--positive\", \"options__balance--negative\");\r\n  } else {\r\n    availableMoney.classList.add(\"options__balance--negative\");\r\n    availableMoney.classList.remove(\"options__balance--positive\");\r\n  }\r\n\r\n  availableMoney.textContent = balance;\r\n}\r\n\r\nexport default calculateBalance;","import {transactionId, moneyArray, availableMoney, categoryIcon, incomesList, expensesList, nameInput, amountInput, categorySelect, confirmationModal} from \"../main.js\";\nimport {openEditionPanel} from \"../panel/transaction_panel.js\";\nimport checkCategory from \"../utils/category.js\";\nimport formatInputName from \"../utils/input_name.js\";\nimport formatCurrency from \"../utils/money.js\";\nimport calculateBalance from \"../utils/balance.js\";\n\nexport const createNewTransaction = () => {\n  // Create a list item\n  const listItem = document.createElement(\"li\");\n  // Create a container for a new transaction\n  const transactionContainer = document.createElement(\"div\");\n  // Give the new transaction a unique id\n  transactionContainer.dataset.id = transactionId;\n  // Return category icon based on selected category\n  checkCategory(categorySelect);\n  // Return the monetary value of the transaction\n  const amountFormatted = formatCurrency(amountInput.value);\n  // Set the new transaction name and amount and add transaction category icon\n  const transaction = document.querySelector(\".transaction__template\").content.cloneNode(true);\n  transaction.querySelector(\".transactions__item-name\").innerHTML = `${categoryIcon} ${formatInputName(nameInput.value)}`;\n  transaction.querySelector(\".transactions__item-amount-text\").innerHTML = `<i class=\"fa-solid fa-dollar-sign\"></i> ${amountFormatted}`;\n  transaction.querySelector(\".transactions__item-amount-button--edit\").addEventListener(\"click\", (event) => openEditionPanel(event, transactionId));\n  transaction.querySelector(\".transactions__item-amount-button--delete\").addEventListener(\"click\", (event) => deleteTransaction(event, amountFormatted));\n  // Put the new transaction inside its container\n  transactionContainer.appendChild(transaction);\n  // Put the new transaction's container inside the list item (li) tag\n  listItem.appendChild(transactionContainer);\n  // If amount is positive, add a new income, otherwise add a new expense\n  if (amountInput.value > 0) {\n    transactionContainer.classList.add(\"transactions__item\", \"transactions__item--income\");\n    incomesList.appendChild(listItem);\n  } else {\n    transactionContainer.classList.add(\"transactions__item\", \"transactions__item--expense\");\n    expensesList.appendChild(listItem);\n  }\n  // Add the amount of the new transaction to `moneyArray` and recalculate the balance\n  moneyArray.push(parseFloat(amountFormatted));\n  calculateBalance(moneyArray);\n  // Increment the transaction id\n  transactionId += 1;\n}\n\nexport const editTransaction = (panel, [nameInput, amountInput, categorySelect], transaction, transactionAmount) => { \n  // Return category icon based on selected category\n  checkCategory(categorySelect);\n  // Get the old amount and turn it into a number\n  const oldAmount = parseFloat(transactionAmount);\n  // Get the index of the old amount from `moneyArray`\n  const oldAmountIndex = moneyArray.indexOf(oldAmount);\n  // Return the monetary value of the transaction\n  const newAmountFormatted = formatCurrency(amountInput.value);\n  // Set the new transaction name and transaction category icon\n  transaction.querySelector(\".transactions__item-name\").innerHTML = `${categoryIcon} ${formatInputName(nameInput.value)}`;\n  // Set the new transaction amount\n  transaction.querySelector(\".transactions__item-amount-text\").innerHTML = `<i class=\"fa-solid fa-dollar-sign\"></i> ${newAmountFormatted}`;\n  // Remove the classes that identify the transaction as an income or expense\n  transaction.classList.remove(\"transactions__item--income\", \"transactions__item--expense\");\n  // If the new amount is positive, turn the transaction into an income, otherwise turn it into an expense\n  if (newAmountFormatted > 0) {\n    transaction.classList.remove(\"transactions__item--expense\");\n    transaction.classList.add(\"transactions__item--income\");\n  } else {\n    transaction.classList.remove(\"transactions__item--income\");\n    transaction.classList.add(\"transactions__item--expense\");\n  }\n  // Replace the old amount with the new amount\n  moneyArray.splice(oldAmountIndex, 1, parseFloat(newAmountFormatted));\n\n  // Recalculate the balance\n  calculateBalance(moneyArray);\n}\n\nconst deleteTransaction = (event, amountFormatted) => {\n  const transactionToDelete = event.target.closest(\".transactions__item\");\n  const amountToDelete = parseFloat(amountFormatted);\n  const transactionIndex = moneyArray.indexOf(amountToDelete)\n\n  transactionToDelete.classList.contains(\"transactions__item--income\")\n    ? incomesList.removeChild(transactionToDelete)\n    : expensesList.removeChild(transactionToDelete);\n\n  moneyArray.splice(transactionIndex, 1);\n  calculateBalance(moneyArray);  \n}\n\nexport const deleteAllTransactions = () => {\n  incomesList.innerHTML = \"\";\n  expensesList.innerHTML = \"\";\n  moneyArray = [0];\n  availableMoney.textContent = \"0\";\n  availableMoney.style.color = \"#f0ebd8\";\n  confirmationModal.classList.remove(\"confirmation-modal--open\");\n}","import {closePanel} from \"./transaction_panel.js\";\nimport {createNewTransaction, editTransaction} from \"../data/transactions.js\";\nimport formatInputName from \"../utils/input_name.js\";\n\nconst handleFormSubmit = (event, {panel, nameInput, amountInput, categorySelect}, transaction, transactionAmount) => {\n  event.preventDefault();\n\n  console.log(transaction);\n  console.log(transactionAmount);\n  \n  checkName(nameInput);\n  checkAmount(amountInput);\n  checkSelect(categorySelect);\n  checkForErrors(panel, [nameInput, amountInput, categorySelect], transaction, transactionAmount);\n}\n\nconst checkName = (nameInput) => {\n  const minLength = nameInput.minLength;\n  const maxLength = nameInput.maxLength;\n\n  if (!nameInput.value) {\n    displayError(nameInput, `${formatInputName(nameInput.id)} must be provided.`);\n  } else if (nameInput.value.length < minLength || nameInput.value.length > maxLength) {\n    displayError(nameInput, `${formatInputName(nameInput.id)} must be between ${minLength} and ${maxLength} characters long.`);\n  } else {\n    removeError(nameInput);\n  }\n}\n\nconst checkAmount = (amountInput) => {\n  const amount = parseFloat(amountInput.value);\n\n  if (isNaN(amount)) {\n    displayError(amountInput, `${formatInputName(amountInput.id)} must be provided.`);\n  } else if (amount === 0) {\n    displayError(amountInput, `${formatInputName(amountInput.id)} cannot be equal to zero.`);\n  } else {\n    removeError(amountInput);\n  }\n}\n\nconst checkSelect = (categorySelect) => {\n  categorySelect.value === \"none\"\n    ? displayError(categorySelect, `${formatInputName(categorySelect.id)} must be selected.`)\n    : removeError(categorySelect);\n}\n\nconst displayError = (formControl, errorMessage) => {\n  const error = formControl.closest(\".transaction-panel__control-box\").querySelector(\".transaction-panel__error\");\n  error.classList.add(\"transaction-panel__error--active\");\n  error.textContent = errorMessage;\n  formControl.classList.add(\"transaction-panel__input--error\");\n}\n\nconst removeError = (formControl) => {\n  const error = formControl.closest(\".transaction-panel__control-box\").querySelector(\".transaction-panel__error\");\n  error.classList.remove(\"transaction-panel__error--active\");\n  error.textContent = \"\";\n  formControl.classList.remove(\"transaction-panel__input--error\");\n}\n\nconst checkForErrors = (panel, inputs, transaction, transactionAmount) => {\n  let hasErrors = false;\n\n  inputs.forEach((input) => {\n    input.classList.contains(\"transaction-panel__input--error\") \n      ? hasErrors = true\n      : hasErrors = false;\n  });\n\n  if (!hasErrors) { // Nie ma błędów\n    if (panel.classList.contains(\"transaction-panel--create\")) createNewTransaction();\n    else if (panel.classList.contains(\"transaction-panel--edit\")) editTransaction(panel, inputs, transaction, transactionAmount);\n    \n    closePanel(panel, inputs);\n  }\n}\n\nexport default handleFormSubmit;","import {transactionPanel, editionPanel, nameInput, nameToEditInput, amountInput, amountToEditInput, categorySelect, categoryToEditSelect} from \"../main.js\";\r\nimport {editTransaction} from \"../data/transactions.js\";\r\nimport handleFormSubmit from \"./form_validation.js\";\r\n\r\nexport const openTransactionPanel = () => {\r\n  // Show the transaction panel\r\n  transactionPanel.classList.add(\"transaction-panel--open\");\r\n  // Put focus on the name input\r\n  transactionPanel.querySelector(\".transaction-panel__input--name\").focus();\r\n  // Add event listeners on the `Save` and `Cancel` buttons\r\n  transactionPanel.querySelector(\".transaction-panel__button--save\").addEventListener(\"click\", (event) => handleFormSubmit(event, {panel: transactionPanel, nameInput: nameInput, amountInput: amountInput, categorySelect: categorySelect}));\r\n  transactionPanel.querySelector(\".transaction-panel__button--cancel\").addEventListener(\"click\", () => closePanel(transactionPanel, [nameInput, amountInput, categorySelect]));\r\n}\r\n\r\nexport const openEditionPanel = (event) => {\r\n  console.log(event.target.closest(\".transactions__item\"));\r\n  // Get the transaction and its details\r\n  const transaction = event.target.closest(\".transactions__item\");\r\n  const transactionName = transaction.querySelector(\".transactions__item-name\").textContent.trim();\r\n  const transactionAmount = transaction.querySelector(\".transactions__item-amount-text\").textContent.trim();\r\n\r\n  // Show the edition panel\r\n  editionPanel.classList.add(\"transaction-panel--open\");\r\n  // Put focus on the name input\r\n  editionPanel.querySelector(\".transaction-panel__input--name\").focus();\r\n  // Fill the inputs with values from `transactionName` and `transactionAmount`\r\n  editionPanel.querySelector(\".transaction-panel__input--name\").value = transactionName;\r\n  editionPanel.querySelector(\".transaction-panel__input--amount\").value = transactionAmount;\r\n  // Add event listeners on the `Apply` and `Cancel` buttons\r\n  editionPanel.querySelector(\".transaction-panel__button--edit\").addEventListener(\"click\", (event) => handleFormSubmit(event, {panel: editionPanel, nameInput: nameToEditInput, amountInput: amountToEditInput, categorySelect: categoryToEditSelect}, transaction, transactionAmount));\r\n  editionPanel.querySelector(\".transaction-panel__button--cancel\").addEventListener(\"click\", () => closePanel(editionPanel, [nameToEditInput, amountToEditInput, categoryToEditSelect]));\r\n}\r\n\r\nexport const clearInputs = (inputs) => {\r\n  inputs.forEach((input) => {\r\n    input.value = \"\";\r\n    input.classList.remove(\"transaction-panel__input--error\");\r\n  });\r\n\r\n  inputs[2].selectedIndex = 0;\r\n}\r\n\r\nexport const clearErrors = (inputs) => {\r\n  // document.querySelectorAll(\".transaction-panel__error\").forEach(error => error.style.display = \"none\");\r\n  inputs.forEach((input) => {\r\n    input.classList.remove(\"transaction-panel__input--error\");\r\n    input.closest(\".transaction-panel__control-box\").querySelector(\".transaction-panel__error\").classList.remove(\"transaction-panel__error--active\");\r\n  });\r\n}\r\n\r\nexport const closePanel = (panel, inputs) => {\r\n  clearInputs(inputs);\r\n  clearErrors(inputs);\r\n  panel.classList.remove(\"transaction-panel--open\");\r\n}","import setFooterYear from \"./footer.js\";\nimport {openTransactionPanel, closePanel} from \"./panel/transaction_panel.js\";\nimport {openConfirmationModal, closeConfirmationModal} from \"./modal/modal.js\";\nimport {switchToDarkMode, switchToLightMode} from \"./utils/color_mode.js\";\n\n// Root element\nexport let rootElement; \n// Footer year\nexport let footerYear;\n// Wallet icon\nexport let walletIcon;\n// Lists of transactions\nexport let incomesList;\nexport let expensesList;\n// Category icon\nexport let categoryIcon;  \n// Buttons for transactions\nlet addTransactionBtn; \nlet deleteTransactionBtn;\nlet deleteAllBtn;\n// Light and dark mode buttons\nlet lightCircle;\nlet darkCircle;\n// Transaction creation panel\nexport let transactionPanel;\nexport let nameInput;\nexport let amountInput;\nexport let categorySelect;\nlet closePanelBtn;\n// Transaction edition panel\nexport let editionPanel;\nexport let nameToEditInput;\nexport let amountToEditInput;\nexport let categoryToEditSelect;\nlet closeEditionPanelBtn;\n// Confirmation modal\nexport let confirmationModal;\nlet cancelDeletionButton;\n// Edition modal\nlet editionModal;\n\n// Transaction ID\nexport let transactionId = 0;\n// Amounts array\nexport let moneyArray = [0];\n// Balance info (how much money is available)\nexport let availableMoney;\n\nconst main = () => {\n  getElements();\n  addEventListeners();\n  setFooterYear(); \n}\n\nconst getElements = () => {\n  // Root element\n  rootElement = document.documentElement;\n  // Footer year\n  footerYear = document.querySelector(\".footer__year\");\n  // Wallet icon\n  walletIcon = document.querySelector(\".header__title-icon\");\n  // Balance info\n  availableMoney = document.querySelector(\".options__balance > span\");\n  // Lists of transactions\n  incomesList = document.querySelector(\".incomes-box__list\");\n  expensesList = document.querySelector(\".expenses-box__list\");\n  // Buttons for transactions\n  addTransactionBtn = document.querySelector(\".options__controls-btn--add\");\n  deleteTransactionBtn = document.querySelector(\".incomes-box__item-amount-btn\");\n  deleteAllBtn = document.querySelector(\".options__controls-btn--deleteAll\");\n  // Light and dark mode buttons\n  lightCircle = document.querySelector(\".options__style-button--light\");\n  darkCircle = document.querySelector(\".options__style-button--dark\");\n  // Transaction creation panel\n  transactionPanel = document.querySelector(\".transaction-panel--create\");\n  nameInput = transactionPanel.querySelector(\"#name\");\n  amountInput = transactionPanel.querySelector(\"#amount\");\n  categorySelect = transactionPanel.querySelector(\"#category\");\n  closePanelBtn = transactionPanel.querySelector(\".transaction-panel__xmark\");\n  // Transaction edition panel\n  editionPanel = document.querySelector(\".transaction-panel--edit\");\n  nameToEditInput = editionPanel.querySelector(\"#name-to-edit\");\n  amountToEditInput = editionPanel.querySelector(\"#amount-to-edit\");\n  categoryToEditSelect = editionPanel.querySelector(\"#category-to-edit\");\n  closeEditionPanelBtn = editionPanel.querySelector(\".transaction-panel__xmark\"); \n  // Confirmation modal\n  confirmationModal = document.querySelector(\".confirmation-modal\");\n  cancelDeletionButton = document.querySelector(\".confirmation-modal__button--cancel\");\n  // Edition modal\n  editionModal = document.querySelector(\".edition-modal\");\n} \n\nconst addEventListeners = () => {\n  addTransactionBtn.addEventListener(\"click\", openTransactionPanel);\n  deleteAllBtn.addEventListener(\"click\", openConfirmationModal);\n  cancelDeletionButton.addEventListener(\"click\", closeConfirmationModal);\n  closePanelBtn.addEventListener(\"click\", () => closePanel(transactionPanel, [nameInput, amountInput, categorySelect]));\n  closeEditionPanelBtn.addEventListener(\"click\", () => closePanel(editionPanel, [nameToEditInput, amountToEditInput, categoryToEditSelect]));\n  lightCircle.addEventListener(\"click\", switchToLightMode); \n  darkCircle.addEventListener(\"click\", switchToDarkMode);\n}\n\nwindow.addEventListener(\"DOMContentLoaded\", main);\n\n// const editTransaction = (transactionId) => {\n//   const currentIncomes = incomesBox.children;\n//   const currentExpenses = expensesBox.children;\n\n//   const transactionToEdit = document.getElementById(transactionId);\n//   const amountOfTransactionToEdit = parseFloat(transactionToEdit.childNodes[9].childNodes[1].innerText.slice(1));\n//   const indexOfTransactionToEdit = moneyArray.indexOf(amountOfTransactionToEdit);\n\n//   const currentNameOfTransaction = transactionToEdit.querySelector(\".transactions__item-name\");\n//   const currentAmountOfTransaction = transactionToEdit.querySelector(\".transactions__item-amount-text\");\n\n//   const newNameOfTransaction = nameToEditInput.value;\n//   const newAmountOfTransaction = parseFloat(amountToEditInput.value);\n\n//   checkCategory(categoryToEditSelect);\n\n//   currentNameOfTransaction.innerHTML = `${categoryIcon} ${newNameOfTransaction.charAt(0).toUpperCase() + newNameOfTransaction.slice(1)}`;\n//   currentAmountOfTransaction.innerHTML = `<i class=\"fa-solid fa-dollar-sign\"></i> ${newAmountOfTransaction}`;\n\n//   if (newAmountOfTransaction > 0) {\n//     const isExpense = Array.from(currentExpenses).includes(transactionToEdit);\n\n//     if (isExpense) {\n//       transactionToEdit.classList.remove(\"transactions__item--expense\");\n//       transactionToEdit.classList.add(\"transactions__item--income\");\n//       expensesBox.removeChild(transactionToEdit);\n//       incomesBox.appendChild(transactionToEdit);\n//     }\n//   } else {\n//     const isIncome = Array.from(currentIncomes).includes(transactionToEdit);\n\n//     if (isIncome) {\n//       transactionToEdit.classList.remove(\"transactions__item--income\");\n//       transactionToEdit.classList.add(\"transactions__item--expense\");\n//       incomesBox.removeChild(transactionToEdit);\n//       expensesBox.appendChild(transactionToEdit);\n//     }\n//   }\n\n//   moneyArray[indexOfTransactionToEdit] = newAmountOfTransaction;\n//   calculateBalance(moneyArray);\n// }","import {confirmationModal} from \"../main.js\";\r\nimport {deleteAllTransactions} from \"../data/transactions.js\";\r\n\r\nexport const openConfirmationModal = () => {\r\n  confirmationModal.classList.add(\"confirmation-modal--open\");\r\n  confirmationModal.querySelector(\".confirmation-modal__button--confirm\").removeEventListener(\"click\", deleteAllTransactions);\r\n  confirmationModal.querySelector(\".confirmation-modal__button--confirm\").addEventListener(\"click\", deleteAllTransactions);\r\n}\r\n\r\nexport const closeConfirmationModal = () => {\r\n  confirmationModal.classList.remove(\"confirmation-modal--open\");\r\n}","import {rootElement, walletIcon} from \"../main.js\";\r\n\r\nexport const switchToLightMode = () => {\r\n  rootElement.style.setProperty(\"--darkColor\", \"#f0ebd8\");\r\n  rootElement.style.setProperty(\"--lightColor\", \"#0d1321\");\r\n  walletIcon.style.setProperty(\"stroke\", \"#0d1321\");\r\n}\r\n\r\nexport const switchToDarkMode = () => {\r\n  rootElement.style.setProperty(\"--darkColor\", \"#0d1321\");\r\n  rootElement.style.setProperty(\"--lightColor\", \"#f0ebd8\");\r\n  walletIcon.style.setProperty(\"stroke\", \"#f0ebd8\");\r\n};"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","categorySelect","value","categoryIcon","inputValue","trim","charAt","toUpperCase","slice","toLowerCase","amount","Math","round","parseFloat","toFixed","moneyArray","balance","reduce","accumulator","currentValue","availableMoney","classList","add","remove","textContent","deleteAllTransactions","incomesList","innerHTML","expensesList","style","color","confirmationModal","displayError","formControl","errorMessage","error","closest","querySelector","removeError","checkForErrors","panel","inputs","transaction","transactionAmount","hasErrors","forEach","input","contains","listItem","document","createElement","transactionContainer","dataset","id","transactionId","checkCategory","amountFormatted","formatCurrency","amountInput","content","cloneNode","concat","formatInputName","nameInput","addEventListener","event","openEditionPanel","transactionToDelete","target","amountToDelete","transactionIndex","indexOf","removeChild","splice","calculateBalance","deleteTransaction","appendChild","push","createNewTransaction","_ref","_ref2","oldAmount","oldAmountIndex","newAmountFormatted","editTransaction","closePanel","preventDefault","console","log","minLength","maxLength","length","checkName","isNaN","checkAmount","checkSelect","rootElement","footerYear","walletIcon","addTransactionBtn","deleteAllBtn","lightCircle","darkCircle","transactionPanel","closePanelBtn","editionPanel","nameToEditInput","amountToEditInput","categoryToEditSelect","closeEditionPanelBtn","cancelDeletionButton","openTransactionPanel","focus","handleFormSubmit","transactionName","selectedIndex","clearInputs","clearErrors","openConfirmationModal","removeEventListener","closeConfirmationModal","switchToLightMode","setProperty","switchToDarkMode","window","now","documentElement","Date","getFullYear"],"sourceRoot":""}