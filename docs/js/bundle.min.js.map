{"version":3,"file":"bundle.min.js","mappings":"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","sources":["webpack://e-wallet_app/webpack/bootstrap","webpack://e-wallet_app/webpack/runtime/define property getters","webpack://e-wallet_app/webpack/runtime/hasOwnProperty shorthand","webpack://e-wallet_app/./src/js/panel/creation_panel.js","webpack://e-wallet_app/./src/js/utils/input_name.js","webpack://e-wallet_app/./src/js/utils/money.js","webpack://e-wallet_app/./src/js/data/transactions.js","webpack://e-wallet_app/./src/js/utils/category.js","webpack://e-wallet_app/./src/js/utils/balance.js","webpack://e-wallet_app/./src/js/panel/form_validation.js","webpack://e-wallet_app/./src/js/modal/modal.js","webpack://e-wallet_app/./src/js/main.js","webpack://e-wallet_app/./src/js/utils/color_mode.js","webpack://e-wallet_app/./src/js/footer.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import {transactionPanel, nameInput, amountInput, categorySelect} from \"../main.js\";\r\nimport handleFormSubmit from \"./form_validation.js\";\r\n\r\nexport const openTransactionPanel = () => {\r\n  transactionPanel.classList.add(\"transaction-panel--open\");\r\n  transactionPanel.querySelector(\".transaction-panel__button--save\").addEventListener(\"click\", (event) => handleFormSubmit(event, {panel: transactionPanel, nameInput, amountInput, categorySelect}));\r\n  transactionPanel.querySelector(\".transaction-panel__button--cancel\").addEventListener(\"click\", () => closeTransactionPanel(transactionPanel, [nameInput, amountInput, categorySelect]));\r\n}\r\n\r\nexport const closeTransactionPanel = (transactionPanel) => {\r\n  transactionPanel.classList.remove(\"transaction-panel--open\");\r\n}","function formatInputName(inputValue) {\r\n  return inputValue.charAt(0).toUpperCase() + inputValue.slice(1).toLowerCase();\r\n}\r\n\r\nexport default formatInputName;","const formatCurrency = (amountCents) => {\r\n  return (Math.round(amountCents) / 100).toFixed(2);\r\n} \r\n\r\nexport default formatCurrency;","import {transactionId, categoryIcon, incomesBox, expensesBox, moneyArray, nameInput, amountInput, categorySelect} from \"../main.js\";\r\nimport checkCategory from \"../utils/category.js\";\r\nimport formatInputName from \"../utils/input_name.js\";\r\nimport formatCurrency from \"../utils/money.js\";\r\nimport calculateBalance from \"../utils/balance.js\";\r\n\r\nexport const createNewTransaction = () => {\r\n  const newTransaction = document.createElement(\"div\");\r\n  newTransaction.id = transactionId;\r\n  checkCategory(categorySelect);\r\n\r\n  const amountCents = Math.round(parseFloat(amountInput.value) * 100);\r\n\r\n  const transactionItem = document.querySelector(\".transaction__template\").content.cloneNode(true);\r\n  transactionItem.querySelector(\".transactions__item-name\").innerHTML = `${categoryIcon} ${formatInputName(nameInput.value)}`;\r\n  transactionItem.querySelector(\".transactions__item-amount-text\").innerHTML = `<i class=\"fa-solid fa-dollar-sign\"></i> ${formatCurrency(amountCents)}`;\r\n  transactionItem.querySelector(\".transactions__item-amount-button--edit\").setAttribute(\"onclick\", `openEditionPanel(${transactionId})`);\r\n  transactionItem.querySelector(\".transactions__item-amount-button--delete\").setAttribute(\"onclick\", `deleteTransaction(${transactionId})`);\r\n  newTransaction.appendChild(transactionItem);\r\n\r\n  if (amountInput.value > 0) {\r\n    newTransaction.classList.add(\"transactions__item\", \"transactions__item--income\");\r\n    incomesBox.appendChild(newTransaction);\r\n  } else {\r\n    newTransaction.classList.add(\"transactions__item\", \"transactions__item--expense\");\r\n    expensesBox.appendChild(newTransaction);\r\n  }\r\n\r\n  transactionId++;\r\n  moneyArray.push(parseFloat(formatCurrency(amountCents)));\r\n  calculateBalance(moneyArray);\r\n}","import {categorySelect, categoryIcon} from \"../main.js\";\r\n\r\nconst checkCategory = (categorySelect) => {\r\n  switch (categorySelect.value) {\r\n    case \"salary\":\r\n      categoryIcon = `<i class=\"fa-solid fa-wallet\"></i>`;\r\n      break;\r\n    case \"investment\":\r\n      categoryIcon = `<i class=\"fa-solid fa-chart-line\"></i>`;\r\n      break;\r\n    case \"freelance\":\r\n      categoryIcon = `<i class=\"fa-solid fa-briefcase\"></i>`;\r\n      break;\r\n    case \"rent\":\r\n      categoryIcon = `<i class=\"fa-solid fa-house\"></i>`;\r\n      break;\r\n    case \"shopping\":\r\n      categoryIcon = `<i class=\"fa-solid fa-cart-shopping\"></i>`;\r\n      break;\r\n    case \"food\":\r\n      categoryIcon = `<i class=\"fa-solid fa-utensils\"></i>`;\r\n      break;\r\n    case \"bills\":\r\n      categoryIcon = `<i class=\"fa-solid fa-credit-card\"></i>`;\r\n      break;\r\n    case \"cinema\":\r\n      categoryIcon = `<i class=\"fa-solid fa-film\"></i>`;\r\n      break;\r\n    case \"leisure\":\r\n      categoryIcon = `<i class=\"fa-solid fa-glass-cheers\"></i>`;\r\n      break;\r\n    case \"other\":\r\n      categoryIcon = `<i class=\"fa-solid fa-pen\"></i>`;\r\n      break;\r\n  }\r\n};\r\n\r\nexport default checkCategory;","import {moneyArray, availableMoney} from \"../main.js\";\r\n\r\nfunction calculateBalance(moneyArray) {\r\n  console.log(moneyArray);\r\n\r\n  const balance = moneyArray.reduce((accumulator, currentValue) => accumulator + currentValue);\r\n\r\n  if (balance > 0) {\r\n    availableMoney.classList.add(\"options__balance--positive\");\r\n    availableMoney.classList.remove(\"options__balance--negative\");\r\n  } else if (balance === 0) {\r\n    availableMoney.classList.remove(\"options__balance--positive\", \"options__balance--negative\");\r\n  } else {\r\n    availableMoney.classList.add(\"options__balance--negative\");\r\n    availableMoney.classList.remove(\"options__balance--positive\");\r\n  }\r\n\r\n  availableMoney.textContent = balance;\r\n}\r\n\r\nexport default calculateBalance;","import {transactionId} from \"../main.js\";\r\nimport {closeTransactionPanel} from \"./creation_panel.js\";\r\nimport {createNewTransaction} from \"../data/transactions.js\";\r\nimport formatInputName from \"../utils/input_name.js\";\r\n\r\nconst handleFormSubmit = (event, {panel, nameInput, amountInput, categorySelect}, transactionId) => {\r\n  event.preventDefault();\r\n  \r\n  checkName(nameInput);\r\n  checkAmount(amountInput);\r\n  checkSelect(categorySelect);\r\n\r\n  const inputs = [nameInput, amountInput, categorySelect];\r\n  checkForErrors(event, panel, inputs, transactionId);\r\n}\r\n\r\nconst checkName = (nameInput) => {\r\n  const minLength = nameInput.minLength;\r\n  const maxLength = nameInput.maxLength;\r\n\r\n  if (!nameInput.value) {\r\n    displayError(nameInput, `${formatInputName(nameInput.id)} must be provided.`);\r\n  } else if (nameInput.value.length < minLength || nameInput.value.length > maxLength) {\r\n    displayError(nameInput, `${formatInputName(nameInput.id)} must be between ${minLength} and ${maxLength} characters long.`);\r\n  } else {\r\n    removeError(nameInput);\r\n  }\r\n}\r\n\r\nconst checkAmount = (amountInput) => {\r\n  const amount = parseFloat(amountInput.value);\r\n\r\n  if (isNaN(amount)) {\r\n    displayError(amountInput, `${formatInputName(amountInput.id)} must be provided.`);\r\n  } else if (amount === 0) {\r\n    displayError(amountInput, `${formatInputName(amountInput.id)} cannot be equal to zero.`);\r\n  } else {\r\n    removeError(amountInput);\r\n  }\r\n}\r\n\r\nconst checkSelect = (categorySelect) => {\r\n  categorySelect.value === \"none\"\r\n    ? displayError(categorySelect, `${formatInputName(categorySelect.id)} must be selected.`)\r\n    : removeError(categorySelect);\r\n}\r\n\r\nconst displayError = (formControl, errorMessage) => {\r\n  const error = formControl.closest(\".transaction-panel__control-box\").querySelector(\".transaction-panel__error\");\r\n  error.classList.add(\"transaction-panel__error--active\");\r\n  error.textContent = errorMessage;\r\n  formControl.classList.add(\"transaction-panel__input--error\");\r\n}\r\n\r\nconst removeError = (formControl) => {\r\n  const error = formControl.closest(\".transaction-panel__control-box\").querySelector(\".transaction-panel__error\");\r\n  error.classList.remove(\"transaction-panel__error--active\");\r\n  error.textContent = \"\";\r\n  formControl.classList.remove(\"transaction-panel__input--error\");\r\n}\r\n\r\nconst checkForErrors = (event, panel, inputs, transactionId) => {\r\n  let hasErrors = false;\r\n\r\n  inputs.forEach((input) => {\r\n    input.classList.contains(\"transaction-panel__input--error\") \r\n      ? hasErrors = true\r\n      : hasErrors = false;\r\n  });\r\n\r\n  if (!hasErrors) {\r\n    createNewTransaction();\r\n    clearInputs(inputs);\r\n    clearErrors(inputs);\r\n    closeTransactionPanel(panel);\r\n  }\r\n}\r\n\r\nexport const clearInputs = (inputs) => {\r\n  inputs.forEach((input) => {\r\n    input.value = \"\";\r\n    input.classList.remove(\"transaction-panel__input--error\");\r\n  });\r\n\r\n  inputs[2].selectedIndex = 0;\r\n}\r\n\r\nexport const clearErrors = (inputs) => {\r\n  // document.querySelectorAll(\".transaction-panel__error\").forEach(error => error.style.display = \"none\");\r\n  inputs.forEach((input) => {\r\n    input.classList.remove(\"transaction-panel__input--error\");\r\n    input.closest(\".transaction-panel__control-box\").querySelector(\".transaction-panel__error\").classList.remove(\"transaction-panel__error--active\");\r\n  });\r\n}\r\n\r\nexport default handleFormSubmit;","import {confirmationModal} from \"../main.js\";\r\n\r\nexport const openConfirmationModal = () => {\r\n  confirmationModal.classList.add(\"confirmation-modal--open\");\r\n}\r\n\r\nexport const closeConfirmationModal = () => {\r\n  confirmationModal.classList.remove(\"confirmation-modal--open\");\r\n}","import setFooterYear from \"./footer.js\";\nimport calculateBalance from \"./utils/balance.js\";\nimport checkCategory from \"./utils/category.js\";\nimport formatInputName from \"./utils/input_name.js\";\nimport handleFormSubmit from \"./panel/form_validation.js\";\nimport {openTransactionPanel, closeTransactionPanel} from \"./panel/creation_panel.js\";\nimport {openConfirmationModal, closeConfirmationModal} from \"./modal/modal.js\";\nimport {switchToDarkMode, switchToLightMode} from \"./utils/color_mode.js\";\n\n// Root element\nexport let rootElement; \n// Footer year\nexport let footerYear;\n// Wallet icon\nexport let walletIcon;\n// Boxes for transactions\nexport let incomesBox; \nexport let expensesBox;\n// Category icon\nexport let categoryIcon;  \n// Buttons for transactions\nlet addTransactionBtn; \nlet deleteTransactionBtn;\nlet deleteAllBtn;\n// Light and dark mode buttons\nlet lightCircle;\nlet darkCircle;\n// Transaction creation panel\nexport let transactionPanel;\nexport let nameInput;\nexport let amountInput;\nexport let categorySelect;\nlet categorySelectArrow;\nlet saveBtn;\nlet cancelBtn;\nlet closePanelBtn;\n// Transaction edition panel\nlet editTransactionPanel;\nlet nameToEditInput;\nlet amountToEditInput;\nlet categoryToEditSelect;\nlet categoryToEditSelectArrow;\nlet saveEditionBtn;\nlet cancelEditionBtn;\nlet closeEditionPanelBtn;\n// Confirmation modal\nexport let confirmationModal;\nlet confirmDeletionButton;\nlet doNotConfirmDeletionButton;\n// Edition modal\nlet editionModal;\n\n// Transaction number\nexport let transactionId = 0;\n// Amounts array\nexport let moneyArray = [0];\n// Balance info\nexport let availableMoney;\n\nconst main = () => {\n  getElements();\n  addEventListeners();\n  setFooterYear(); \n}\n\nconst getElements = () => {\n  // Root element\n  rootElement = document.documentElement;\n  // Footer year\n  footerYear = document.querySelector(\".footer__year\");\n  // Wallet icon\n  walletIcon = document.querySelector(\".header__title-icon\");\n  // Balance info\n  availableMoney = document.querySelector(\".options__balance > span\");\n  // Boxes for transactions\n  incomesBox = document.querySelector(\".incomes-box\");\n  expensesBox = document.querySelector(\".expenses-box\");\n  // Buttons for transactions\n  addTransactionBtn = document.querySelector(\".options__controls-btn--add\");\n  deleteTransactionBtn = document.querySelector(\".incomes-box__item-amount-btn\");\n  deleteAllBtn = document.querySelector(\".options__controls-btn--deleteAll\");\n  // Light and dark mode buttons\n  lightCircle = document.querySelector(\".options__style-button--light\");\n  darkCircle = document.querySelector(\".options__style-button--dark\");\n  // Transaction creation panel\n  transactionPanel = document.querySelector(\".transaction-panel--create\");\n  nameInput = transactionPanel.querySelector(\"#name\");\n  amountInput = transactionPanel.querySelector(\"#amount\");\n  categorySelect = transactionPanel.querySelector(\"#category\");\n  categorySelectArrow = transactionPanel.querySelector(\".transaction-panel__arrow\");\n  closePanelBtn = transactionPanel.querySelector(\".transaction-panel__xmark\");\n  // Transaction edition panel\n  editTransactionPanel = document.querySelector(\".transaction-panel--edit\");\n  nameToEditInput = editTransactionPanel.querySelector(\"#name-to-edit\");\n  amountToEditInput = editTransactionPanel.querySelector(\"#amount-to-edit\");\n  categoryToEditSelect = editTransactionPanel.querySelector(\"#category-to-edit\");\n  categoryToEditSelectArrow = editTransactionPanel.querySelector(\".transaction-panel__arrow\");\n  closeEditionPanelBtn = editTransactionPanel.querySelector(\".transaction-panel__xmark\");\n  // Confirmation modal\n  confirmationModal = document.querySelector(\".confirmation-modal\");\n  confirmDeletionButton = document.querySelector(\".confirmation-modal__button--confirm\");\n  doNotConfirmDeletionButton = document.querySelector(\".confirmation-modal__button--cancel\");\n  // Edition modal\n  editionModal = document.querySelector(\".edition-modal\");\n} \n\nconst addEventListeners = () => {\n  addTransactionBtn.addEventListener(\"click\", openTransactionPanel);\n  deleteAllBtn.addEventListener(\"click\", openConfirmationModal);\n  doNotConfirmDeletionButton.addEventListener(\"click\", closeConfirmationModal);\n  closePanelBtn.addEventListener(\"click\", () => closeTransactionPanel(transactionPanel, [nameInput, amountInput, categorySelect]));\n  closeEditionPanelBtn.addEventListener(\"click\", () => closeTransactionPanel(nameToEditInput, amountToEditInput, categoryToEditSelect, categoryToEditSelectArrow, editTransactionPanel));\n  lightCircle.addEventListener(\"click\", switchToLightMode);\n  darkCircle.addEventListener(\"click\", switchToDarkMode);\n  confirmDeletionButton.addEventListener(\"click\", deleteAllTransactions);\n} \n\nconst openEditionPanel = (transactionId) => {\n  editTransactionPanel.classList.add(\"active\");\n  editTransactionPanel.querySelector(\".transaction-panel__button--edit\").addEventListener(\"click\", (event) => handleFormSubmit(event, nameToEditInput, amountToEditInput, categoryToEditSelect, editTransactionPanel, transactionId));\n  editTransactionPanel.querySelector(\".transaction-panel__button--cancel\").addEventListener(\"click\", () => closeTransactionPanel(nameToEditInput, amountToEditInput, categoryToEditSelect, categoryToEditSelectArrow, editTransactionPanel));\n}\n\nconst editTransaction = (transactionId) => {\n  const currentIncomes = incomesBox.children;\n  const currentExpenses = expensesBox.children;\n\n  const transactionToEdit = document.getElementById(transactionId);\n  const amountOfTransactionToEdit = parseFloat(transactionToEdit.childNodes[9].childNodes[1].innerText.slice(1));\n  const indexOfTransactionToEdit = moneyArray.indexOf(amountOfTransactionToEdit);\n\n  const currentNameOfTransaction = transactionToEdit.querySelector(\".transactions__item-name\");\n  const currentAmountOfTransaction = transactionToEdit.querySelector(\".transactions__item-amount-text\");\n\n  const newNameOfTransaction = nameToEditInput.value;\n  const newAmountOfTransaction = parseFloat(amountToEditInput.value);\n\n  checkCategory(categoryToEditSelect);\n\n  currentNameOfTransaction.innerHTML = `${categoryIcon} ${newNameOfTransaction.charAt(0).toUpperCase() + newNameOfTransaction.slice(1)}`;\n  currentAmountOfTransaction.innerHTML = `<i class=\"fa-solid fa-dollar-sign\"></i> ${newAmountOfTransaction}`;\n\n  if (newAmountOfTransaction > 0) {\n    const isExpense = Array.from(currentExpenses).includes(transactionToEdit);\n\n    if (isExpense) {\n      transactionToEdit.classList.remove(\"transactions__item--expense\");\n      transactionToEdit.classList.add(\"transactions__item--income\");\n      expensesBox.removeChild(transactionToEdit);\n      incomesBox.appendChild(transactionToEdit);\n    }\n  } else {\n    const isIncome = Array.from(currentIncomes).includes(transactionToEdit);\n\n    if (isIncome) {\n      transactionToEdit.classList.remove(\"transactions__item--income\");\n      transactionToEdit.classList.add(\"transactions__item--expense\");\n      incomesBox.removeChild(transactionToEdit);\n      expensesBox.appendChild(transactionToEdit);\n    }\n  }\n\n  moneyArray[indexOfTransactionToEdit] = newAmountOfTransaction;\n  calculateBalance(moneyArray);\n}\n  \n// const closeTransactionPanel = (name, amount, category, categoryArrow, panel) => {\n//   clearElements(name, amount, category, categoryArrow);\n//   clearErrors(); \n//   panel.classList.remove(\"active\");\n// }\n\n// const clearElements = (name, amount, category, categoryArrow) => {\n  // name.value = \"\";\n  // name.classList.remove(\"transaction-panel__input--error\");\n  // amount.value = \"\";\n  // amount.classList.remove(\"transaction-panel__input--error\");\n  // category.selectedIndex = 0;\n  // category.classList.remove(\"transaction-panel__input--error\");\n  // categoryArrow.classList.remove(\"transaction-panel__arrow--error\");\n// }\n\n// const handleFormSubmit = (event, name, amount, category, panel, transactionId) => {\n//   event.preventDefault(); \n\n//   validateInputs([name, amount]);\n//   validateSelect(category);\n//   checkLength(name);\n//   checkForErrors(event, name, amount, category, panel, transactionId);\n// }\n\n// const validateInputs = (inputs) => {\n//   inputs.forEach((input) => {\n//     if (input.value === \"\") {\n//       displayError(input, `${input.id.charAt(0).toUpperCase() + input.id.slice(1)} cannot be empty!`);\n//     } else if (input.value === \"0\") {\n//       displayError(input, `${input.id.charAt(0).toUpperCase() + input.id.slice(1)} cannot be equal to zero!`);\n//     } else {\n//       removeError(input);\n//     }\n//   });\n// }\n\n// const validateSelect = (categorySelect) => {\n//   if (categorySelect.value === \"none\") {\n//     displayError(categorySelect, `${categorySelect.id.charAt(0).toUpperCase() + categorySelect.id.slice(1)} must be selected!`);\n//   } else {\n//     removeError(categorySelect);\n//   }\n// }\n\n// const checkLength = (nameInput) => {\n//   if (nameInput.value.length < nameInput.minLength || nameInput.value.length > nameInput.maxLength) {\n//     displayError(nameInput, `${nameInput.id.charAt(0).toUpperCase() + nameInput.id.slice(1)} must be between ${nameInput.minLength} and ${nameInput.maxLength} characters!`);\n//   } else {\n//     removeError(nameInput);\n//   }\n// }\n\n// const checkForErrors = (event, name, amount, category, panel, transactionId) => {\n//   const editTransactionBtn = editTransactionPanel.querySelector(\".transaction-panel__button--edit\");\n//   const checkIcon = editTransactionPanel.querySelector(\"i.fa-solid.fa-check\");\n\n//   if (name.value !== \"\" && name.value.length >= name.minLength && name.value.length <= name.maxLength && name.value !== \"0\" && amount.value !== \"\" && amount.value !== \"0\" && category.value !== \"none\") {\n//     if (event.target === editTransactionBtn || event.target === checkIcon) {\n//       editTransaction(transactionId);\n//       closeTransactionPanel(nameToEditInput, amountToEditInput, categoryToEditSelect, categoryToEditSelectArrow, panel);\n//     } else {\n//       createNewTransaction();\n//       closeTransactionPanel(nameInput, amountInput, categorySelect, categorySelectArrow, panel);\n//     }\n//   }\n// }\n\n// const createNewTransaction = () => {\n//   const newTransaction = document.createElement(\"div\");\n//   newTransaction.id = transactionId;\n//   checkCategory(categorySelect);\n\n//   transactionTemplate = transactionTemplate.content.cloneNode(true);\n//   transactionTemplate.querySelector(\".transactions__item-name\").innerHTML = `${categoryIcon} ${formatInputName(nameInput.value)}`;\n//   transactionTemplate.querySelector(\".transactions__item-amount-text\").innerHTML = `<i class=\"fa-solid fa-dollar-sign\"></i> ${amountInput.value}`;\n//   transactionTemplate.querySelector(\".transactions__item-amount-button--edit\").setAttribute(\"onclick\", `openEditionPanel(${transactionId})`);\n//   transactionTemplate.querySelector(\".transactions__item-amount-button--delete\").setAttribute(\"onclick\", `deleteTransaction(${transactionId})`);\n//   newTransaction.appendChild(transactionTemplate);\n\n//   if (amountInput.value > 0) {\n//     newTransaction.classList.add(\"transactions__item\", \"transactions__item--income\");\n//     incomesBox.appendChild(newTransaction);\n//   } else {\n//     newTransaction.classList.add(\"transactions__item\", \"transactions__item--expense\");\n//     expensesBox.appendChild(newTransaction);\n//   }\n\n//   transactionId++;\n//   moneyArray.push(parseFloat(amountInput.value));\n//   calculateBalance(moneyArray);\n// }\n\nconst deleteTransaction = (id) => {\n  const transactionToDelete = document.getElementById(id);\n  const amountOfTransactionToDelete = parseFloat(transactionToDelete.childNodes[9].childNodes[1].innerText.slice(1));\n  const indexOfTransactionToDelete = moneyArray.indexOf(amountOfTransactionToDelete);\n\n  moneyArray.splice(indexOfTransactionToDelete, 1);\n  calculateBalance(moneyArray);\n  transactionToDelete.classList.contains(\"transactions__item--income\") ? incomesBox.removeChild(transactionToDelete) : expensesBox.removeChild(transactionToDelete);\n}\n\nconst deleteAllTransactions = () => {\n  incomesBox.innerHTML = '<h3 class=\"incomes-box__title\">Incomes</h3>';\n  expensesBox.innerHTML = '<h3 class=\"expenses-box__title\">Expenses</h3>';\n  moneyArray = [0];\n  availableMoney.textContent = \"0\";\n  availableMoney.style.color = \"#f0ebd8\";\n  closeConfirmationModal();\n}\n\nwindow.addEventListener(\"DOMContentLoaded\", main);","import {rootElement, walletIcon} from \"../main.js\";\r\n\r\nexport const switchToLightMode = () => {\r\n  rootElement.style.setProperty(\"--darkColor\", \"#f0ebd8\");\r\n  rootElement.style.setProperty(\"--lightColor\", \"#0d1321\");\r\n  walletIcon.style.setProperty(\"stroke\", \"#0d1321\");\r\n}\r\n\r\nexport const switchToDarkMode = () => {\r\n  rootElement.style.setProperty(\"--darkColor\", \"#0d1321\");\r\n  rootElement.style.setProperty(\"--lightColor\", \"#f0ebd8\");\r\n  walletIcon.style.setProperty(\"stroke\", \"#f0ebd8\");\r\n};","import { footerYear } from \"./main.js\";\r\n\r\nconst setFooterYear = () => {\r\n  const now = new Date();\r\n  footerYear.textContent = now.getFullYear();\r\n}\r\n\r\nexport default setFooterYear;"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","openTransactionPanel","transactionPanel","classList","add","querySelector","addEventListener","event","handleFormSubmit","panel","nameInput","amountInput","categorySelect","closeTransactionPanel","remove","inputValue","charAt","toUpperCase","slice","toLowerCase","amountCents","Math","round","toFixed","createNewTransaction","newTransaction","document","createElement","id","transactionId","value","categoryIcon","checkCategory","parseFloat","transactionItem","content","cloneNode","innerHTML","concat","formatInputName","formatCurrency","setAttribute","appendChild","incomesBox","expensesBox","moneyArray","push","console","log","balance","reduce","accumulator","currentValue","availableMoney","textContent","calculateBalance","displayError","formControl","errorMessage","error","closest","removeError","clearInputs","inputs","forEach","input","selectedIndex","clearErrors","_ref","preventDefault","minLength","maxLength","length","checkName","amount","isNaN","checkAmount","checkSelect","hasErrors","contains","checkForErrors","rootElement","footerYear","walletIcon","addTransactionBtn","deleteAllBtn","lightCircle","darkCircle","closePanelBtn","editTransactionPanel","nameToEditInput","amountToEditInput","categoryToEditSelect","categoryToEditSelectArrow","closeEditionPanelBtn","confirmationModal","confirmDeletionButton","doNotConfirmDeletionButton","openConfirmationModal","closeConfirmationModal","switchToLightMode","style","setProperty","switchToDarkMode","deleteAllTransactions","color","window","now","documentElement","Date","getFullYear"],"sourceRoot":""}