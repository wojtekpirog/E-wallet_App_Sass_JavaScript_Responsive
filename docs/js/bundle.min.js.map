{"version":3,"file":"bundle.min.js","mappings":"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","sources":["webpack://e-wallet_app/webpack/bootstrap","webpack://e-wallet_app/webpack/runtime/define property getters","webpack://e-wallet_app/webpack/runtime/hasOwnProperty shorthand","webpack://e-wallet_app/./src/js/footer.js","webpack://e-wallet_app/./src/js/utils/category.js","webpack://e-wallet_app/./src/js/utils/input_name.js","webpack://e-wallet_app/./src/js/utils/money.js","webpack://e-wallet_app/./src/js/utils/balance.js","webpack://e-wallet_app/./src/js/data/transactions.js","webpack://e-wallet_app/./src/js/panel/form_validation.js","webpack://e-wallet_app/./src/js/panel/transaction_panel.js","webpack://e-wallet_app/./src/js/main.js","webpack://e-wallet_app/./src/js/modal/modal.js","webpack://e-wallet_app/./src/js/utils/color_mode.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { footerYear } from \"./main.js\";\r\n\r\nconst setFooterYear = () => {\r\n  const now = new Date();\r\n  footerYear.textContent = now.getFullYear();\r\n}\r\n\r\nexport default setFooterYear;","import {categorySelect, categoryIcon} from \"../main.js\";\r\n\r\nconst checkCategory = (categorySelect) => {\r\n  switch (categorySelect.value) {\r\n    case \"salary\":\r\n      categoryIcon = `<i class=\"fa-solid fa-wallet\"></i>`;\r\n      break;\r\n    case \"investment\":\r\n      categoryIcon = `<i class=\"fa-solid fa-chart-line\"></i>`;\r\n      break;\r\n    case \"freelance\":\r\n      categoryIcon = `<i class=\"fa-solid fa-briefcase\"></i>`;\r\n      break;\r\n    case \"rent\":\r\n      categoryIcon = `<i class=\"fa-solid fa-house\"></i>`;\r\n      break;\r\n    case \"shopping\":\r\n      categoryIcon = `<i class=\"fa-solid fa-cart-shopping\"></i>`;\r\n      break;\r\n    case \"food\":\r\n      categoryIcon = `<i class=\"fa-solid fa-utensils\"></i>`;\r\n      break;\r\n    case \"bills\":\r\n      categoryIcon = `<i class=\"fa-solid fa-credit-card\"></i>`;\r\n      break;\r\n    case \"cinema\":\r\n      categoryIcon = `<i class=\"fa-solid fa-film\"></i>`;\r\n      break;\r\n    case \"leisure\":\r\n      categoryIcon = `<i class=\"fa-solid fa-glass-cheers\"></i>`;\r\n      break;\r\n    case \"other\":\r\n      categoryIcon = `<i class=\"fa-solid fa-pen\"></i>`;\r\n      break;\r\n  }\r\n};\r\n\r\nexport default checkCategory;","function formatInputName(inputValue) {\r\n  return inputValue.trim().charAt(0).toUpperCase() + inputValue.trim().slice(1).toLowerCase();\r\n}\r\n\r\nexport default formatInputName;","const formatCurrency = (amount) => {\r\n  // Turn the value of `amountInput` into an amount in cents\r\n  amount = Math.round(parseFloat(amount) * 100);\r\n  // Format the amount in cents into the monetary value\r\n  return (Math.round(amount) / 100).toFixed(2);\r\n} \r\n\r\nexport default formatCurrency;","import {availableMoney} from \"../main.js\";\r\n\r\nfunction calculateBalance(moneyArray) {\r\n  const balance = moneyArray.reduce((accumulator, currentValue) => accumulator + currentValue);\r\n\r\n  if (balance > 0) {\r\n    availableMoney.classList.add(\"options__balance--positive\");\r\n    availableMoney.classList.remove(\"options__balance--negative\");\r\n  } else if (balance === 0) {\r\n    availableMoney.classList.remove(\"options__balance--positive\", \"options__balance--negative\");\r\n  } else {\r\n    availableMoney.classList.add(\"options__balance--negative\");\r\n    availableMoney.classList.remove(\"options__balance--positive\");\r\n  }\r\n\r\n  availableMoney.textContent = balance;\r\n}\r\n\r\nexport default calculateBalance;","import {transactionId, moneyArray, availableMoney, categoryIcon, incomesList, expensesList, nameInput, amountInput, categorySelect, confirmationModal} from \"../main.js\";\nimport {openEditionPanel} from \"../panel/transaction_panel.js\";\nimport checkCategory from \"../utils/category.js\";\nimport formatInputName from \"../utils/input_name.js\";\nimport formatCurrency from \"../utils/money.js\";\nimport calculateBalance from \"../utils/balance.js\";\n\nexport const createNewTransaction = () => {\n  const newTransaction = document.createElement(\"li\");\n  newTransaction.id = transactionId;\n  // Return category icon based on selected category\n  checkCategory(categorySelect);\n  // Return the monetary value of the transaction\n  const amountFormatted = formatCurrency(amountInput.value);\n\n  const transactionItem = document.querySelector(\".transaction__template\").content.cloneNode(true);\n  transactionItem.querySelector(\".transactions__item-name\").innerHTML = `${categoryIcon} ${formatInputName(nameInput.value)}`;\n  transactionItem.querySelector(\".transactions__item-amount-text\").innerHTML = `<i class=\"fa-solid fa-dollar-sign\"></i> ${amountFormatted}`;\n  transactionItem.querySelector(\".transactions__item-amount-button--edit\").addEventListener(\"click\", (event) => openEditionPanel(event));\n  transactionItem.querySelector(\".transactions__item-amount-button--delete\").addEventListener(\"click\", (event) => deleteTransaction(event, amountFormatted));\n  newTransaction.appendChild(transactionItem);\n\n  // If amount is positive, add a new income, otherwise add a new expense\n  if (amountInput.value > 0) {\n    newTransaction.classList.add(\"transactions__item\", \"transactions__item--income\");\n    incomesList.appendChild(newTransaction);\n  } else {\n    newTransaction.classList.add(\"transactions__item\", \"transactions__item--expense\");\n    expensesList.appendChild(newTransaction);\n  }\n\n  transactionId++;\n  moneyArray.push(parseFloat(amountFormatted));\n  calculateBalance(moneyArray);\n}\n\nexport const editTransaction = (event, transaction, {panel, nameInput, amountInput, categorySelect}) => {\n  event.preventDefault(); \n  // Return category icon based on selected category\n  checkCategory(categorySelect);\n  // Return the monetary value of the transaction\n  const amountFormatted = formatCurrency(amountInput.value);\n  // Set the new transaction name and transaction category icon\n  transaction.querySelector(\".transactions__item-name\").innerHTML = `${categoryIcon} ${formatInputName(nameInput.value)}`;\n  // Set the new transaction amount\n  transaction.querySelector(\".transactions__item-amount-text\").innerHTML = `<i class=\"fa-solid fa-dollar-sign\"></i> ${amountFormatted}`;\n  // Remove the classes that identify the transaction as an income or expense\n  transaction.classList.remove(\"transactions__item--income\", \"transactions__item--expense\");\n  // If the new amount is positive, turn the transaction into an income, otherwise turn it into an expense\n  if (amountFormatted > 0) {\n    transaction.classList.remove(\"transactions__item--expense\");\n    transaction.classList.add(\"transactions__item--income\");\n  } else {\n    transaction.classList.remove(\"transactions__item--income\");\n    transaction.classList.add(\"transactions__item--expense\");\n  }\n}\n\nconst deleteTransaction = (event, amountFormatted) => {\n  const transactionToDelete = event.target.closest(\".transactions__item\");\n  const amountToDelete = parseFloat(amountFormatted);\n  const transactionIndex = moneyArray.indexOf(amountToDelete)\n\n  transactionToDelete.classList.contains(\"transactions__item--income\")\n    ? incomesList.removeChild(transactionToDelete)\n    : expensesList.removeChild(transactionToDelete);\n\n  moneyArray.splice(transactionIndex, 1);\n  calculateBalance(moneyArray);  \n}\n\nexport const deleteAllTransactions = () => {\n  incomesList.innerHTML = \"\";\n  expensesList.innerHTML = \"\";\n  moneyArray = [0];\n  availableMoney.textContent = \"0\";\n  availableMoney.style.color = \"#f0ebd8\";\n  confirmationModal.classList.remove(\"confirmation-modal--open\");\n}","import {closePanel} from \"./transaction_panel.js\";\nimport {createNewTransaction} from \"../data/transactions.js\";\nimport formatInputName from \"../utils/input_name.js\";\n\nconst handleFormSubmit = (event, {panel, nameInput, amountInput, categorySelect}) => {\n  event.preventDefault();\n  \n  checkName(nameInput);\n  checkAmount(amountInput);\n  checkSelect(categorySelect);\n  checkForErrors(panel, [nameInput, amountInput, categorySelect]);\n}\n\nconst checkName = (nameInput) => {\n  const minLength = nameInput.minLength;\n  const maxLength = nameInput.maxLength;\n\n  if (!nameInput.value) {\n    displayError(nameInput, `${formatInputName(nameInput.id)} must be provided.`);\n  } else if (nameInput.value.length < minLength || nameInput.value.length > maxLength) {\n    displayError(nameInput, `${formatInputName(nameInput.id)} must be between ${minLength} and ${maxLength} characters long.`);\n  } else {\n    removeError(nameInput);\n  }\n}\n\nconst checkAmount = (amountInput) => {\n  const amount = parseFloat(amountInput.value);\n\n  if (isNaN(amount)) {\n    displayError(amountInput, `${formatInputName(amountInput.id)} must be provided.`);\n  } else if (amount === 0) {\n    displayError(amountInput, `${formatInputName(amountInput.id)} cannot be equal to zero.`);\n  } else {\n    removeError(amountInput);\n  }\n}\n\nconst checkSelect = (categorySelect) => {\n  categorySelect.value === \"none\"\n    ? displayError(categorySelect, `${formatInputName(categorySelect.id)} must be selected.`)\n    : removeError(categorySelect);\n}\n\nconst displayError = (formControl, errorMessage) => {\n  const error = formControl.closest(\".transaction-panel__control-box\").querySelector(\".transaction-panel__error\");\n  error.classList.add(\"transaction-panel__error--active\");\n  error.textContent = errorMessage;\n  formControl.classList.add(\"transaction-panel__input--error\");\n}\n\nconst removeError = (formControl) => {\n  const error = formControl.closest(\".transaction-panel__control-box\").querySelector(\".transaction-panel__error\");\n  error.classList.remove(\"transaction-panel__error--active\");\n  error.textContent = \"\";\n  formControl.classList.remove(\"transaction-panel__input--error\");\n}\n\nconst checkForErrors = (panel, inputs) => {\n  let hasErrors = false;\n\n  inputs.forEach((input) => {\n    input.classList.contains(\"transaction-panel__input--error\") \n      ? hasErrors = true\n      : hasErrors = false;\n  });\n\n  if (!hasErrors) { // Nie ma błędów\n    if (panel.classList.contains(\"transaction-panel--create\")) {\n      createNewTransaction();\n      closePanel(panel, inputs);\n    }\n\n    // closePanel(panel, inputs);\n  }\n}\n\nexport default handleFormSubmit;","import {transactionPanel, editionPanel, nameInput, nameToEditInput, amountInput, amountToEditInput, categorySelect, categoryToEditSelect} from \"../main.js\";\r\nimport {editTransaction} from \"../data/transactions.js\";\r\nimport handleFormSubmit from \"./form_validation.js\";\r\n\r\nexport const openTransactionPanel = () => {\r\n  // Show the transaction panel\r\n  transactionPanel.classList.add(\"transaction-panel--open\");\r\n  // Put focus on the name input\r\n  transactionPanel.querySelector(\".transaction-panel__input--name\").focus();\r\n  // Add event listeners on the `Save` and `Cancel` buttons\r\n  transactionPanel.querySelector(\".transaction-panel__button--save\").addEventListener(\"click\", (event) => handleFormSubmit(event, {panel: transactionPanel, nameInput: nameInput, amountInput: amountInput, categorySelect: categorySelect}));\r\n  transactionPanel.querySelector(\".transaction-panel__button--cancel\").addEventListener(\"click\", () => closePanel(transactionPanel, [nameInput, amountInput, categorySelect]));\r\n}\r\n\r\nexport const openEditionPanel = (event) => {\r\n  // Get the transaction and its details\r\n  const transaction = event.target.closest(\".transactions__item\");\r\n  const transactionName = transaction.querySelector(\".transactions__item-name\").textContent.trim();\r\n  const transactionAmount = transaction.querySelector(\".transactions__item-amount-text\").textContent.trim();\r\n  // Show the edition panel\r\n  editionPanel.classList.add(\"transaction-panel--open\");\r\n  // Put focus on the name input\r\n  editionPanel.querySelector(\".transaction-panel__input--name\").focus();\r\n  // Fill the inputs with values from `transactionName` and `transactionAmount`\r\n  editionPanel.querySelector(\".transaction-panel__input--name\").value = transactionName;\r\n  editionPanel.querySelector(\".transaction-panel__input--amount\").value = transactionAmount;\r\n  // Add event listeners on the `Apply` and `Cancel` buttons\r\n  editionPanel.querySelector(\".transaction-panel__button--edit\").addEventListener(\"click\", (event) => editTransaction(event, transaction, {panel: editionPanel, nameInput: nameToEditInput, amountInput: amountToEditInput, categorySelect: categoryToEditSelect}));\r\n  editionPanel.querySelector(\".transaction-panel__button--cancel\").addEventListener(\"click\", () => closePanel(editionPanel, [nameToEditInput, amountToEditInput, categoryToEditSelect]));\r\n}\r\n\r\nexport const clearInputs = (inputs) => {\r\n  inputs.forEach((input) => {\r\n    input.value = \"\";\r\n    input.classList.remove(\"transaction-panel__input--error\");\r\n  });\r\n\r\n  inputs[2].selectedIndex = 0;\r\n}\r\n\r\nexport const clearErrors = (inputs) => {\r\n  // document.querySelectorAll(\".transaction-panel__error\").forEach(error => error.style.display = \"none\");\r\n  inputs.forEach((input) => {\r\n    input.classList.remove(\"transaction-panel__input--error\");\r\n    input.closest(\".transaction-panel__control-box\").querySelector(\".transaction-panel__error\").classList.remove(\"transaction-panel__error--active\");\r\n  });\r\n}\r\n\r\nexport const closePanel = (panel, inputs) => {\r\n  clearInputs(inputs);\r\n  clearErrors(inputs);\r\n  panel.classList.remove(\"transaction-panel--open\");\r\n}","import setFooterYear from \"./footer.js\";\nimport {openTransactionPanel, closePanel} from \"./panel/transaction_panel.js\";\nimport {openConfirmationModal, closeConfirmationModal} from \"./modal/modal.js\";\nimport {switchToDarkMode, switchToLightMode} from \"./utils/color_mode.js\";\n\n// Root element\nexport let rootElement; \n// Footer year\nexport let footerYear;\n// Wallet icon\nexport let walletIcon;\n// Lists of transactions\nexport let incomesList;\nexport let expensesList;\n// Category icon\nexport let categoryIcon;  \n// Buttons for transactions\nlet addTransactionBtn; \nlet deleteTransactionBtn;\nlet deleteAllBtn;\n// Light and dark mode buttons\nlet lightCircle;\nlet darkCircle;\n// Transaction creation panel\nexport let transactionPanel;\nexport let nameInput;\nexport let amountInput;\nexport let categorySelect;\nlet closePanelBtn;\n// Transaction edition panel\nexport let editionPanel;\nexport let nameToEditInput;\nexport let amountToEditInput;\nexport let categoryToEditSelect;\nlet closeEditionPanelBtn;\n// Confirmation modal\nexport let confirmationModal;\nlet cancelDeletionButton;\n// Edition modal\nlet editionModal;\n\n// Transaction ID\nexport let transactionId = 0;\n// Amounts array\nexport let moneyArray = [0];\n// Balance info (how much money is available)\nexport let availableMoney;\n\nconst main = () => {\n  getElements();\n  addEventListeners();\n  setFooterYear(); \n}\n\nconst getElements = () => {\n  // Root element\n  rootElement = document.documentElement;\n  // Footer year\n  footerYear = document.querySelector(\".footer__year\");\n  // Wallet icon\n  walletIcon = document.querySelector(\".header__title-icon\");\n  // Balance info\n  availableMoney = document.querySelector(\".options__balance > span\");\n  // Lists of transactions\n  incomesList = document.querySelector(\".incomes-box__list\");\n  expensesList = document.querySelector(\".expenses-box__list\");\n  // Buttons for transactions\n  addTransactionBtn = document.querySelector(\".options__controls-btn--add\");\n  deleteTransactionBtn = document.querySelector(\".incomes-box__item-amount-btn\");\n  deleteAllBtn = document.querySelector(\".options__controls-btn--deleteAll\");\n  // Light and dark mode buttons\n  lightCircle = document.querySelector(\".options__style-button--light\");\n  darkCircle = document.querySelector(\".options__style-button--dark\");\n  // Transaction creation panel\n  transactionPanel = document.querySelector(\".transaction-panel--create\");\n  nameInput = transactionPanel.querySelector(\"#name\");\n  amountInput = transactionPanel.querySelector(\"#amount\");\n  categorySelect = transactionPanel.querySelector(\"#category\");\n  closePanelBtn = transactionPanel.querySelector(\".transaction-panel__xmark\");\n  // Transaction edition panel\n  editionPanel = document.querySelector(\".transaction-panel--edit\");\n  nameToEditInput = editionPanel.querySelector(\"#name-to-edit\");\n  amountToEditInput = editionPanel.querySelector(\"#amount-to-edit\");\n  categoryToEditSelect = editionPanel.querySelector(\"#category-to-edit\");\n  closeEditionPanelBtn = editionPanel.querySelector(\".transaction-panel__xmark\"); \n  // Confirmation modal\n  confirmationModal = document.querySelector(\".confirmation-modal\");\n  cancelDeletionButton = document.querySelector(\".confirmation-modal__button--cancel\");\n  // Edition modal\n  editionModal = document.querySelector(\".edition-modal\");\n}\n\nconst addEventListeners = () => {\n  addTransactionBtn.addEventListener(\"click\", openTransactionPanel);\n  deleteAllBtn.addEventListener(\"click\", openConfirmationModal);\n  cancelDeletionButton.addEventListener(\"click\", closeConfirmationModal);\n  closePanelBtn.addEventListener(\"click\", () => closePanel(transactionPanel, [nameInput, amountInput, categorySelect]));\n  closeEditionPanelBtn.addEventListener(\"click\", () => closePanel(editionPanel, [nameToEditInput, amountToEditInput, categoryToEditSelect]));\n  lightCircle.addEventListener(\"click\", switchToLightMode); \n  darkCircle.addEventListener(\"click\", switchToDarkMode);\n}\n\nwindow.addEventListener(\"DOMContentLoaded\", main);\n\n// const editTransaction = (transactionId) => {\n//   const currentIncomes = incomesBox.children;\n//   const currentExpenses = expensesBox.children;\n\n//   const transactionToEdit = document.getElementById(transactionId);\n//   const amountOfTransactionToEdit = parseFloat(transactionToEdit.childNodes[9].childNodes[1].innerText.slice(1));\n//   const indexOfTransactionToEdit = moneyArray.indexOf(amountOfTransactionToEdit);\n\n//   const currentNameOfTransaction = transactionToEdit.querySelector(\".transactions__item-name\");\n//   const currentAmountOfTransaction = transactionToEdit.querySelector(\".transactions__item-amount-text\");\n\n//   const newNameOfTransaction = nameToEditInput.value;\n//   const newAmountOfTransaction = parseFloat(amountToEditInput.value);\n\n//   checkCategory(categoryToEditSelect);\n\n//   currentNameOfTransaction.innerHTML = `${categoryIcon} ${newNameOfTransaction.charAt(0).toUpperCase() + newNameOfTransaction.slice(1)}`;\n//   currentAmountOfTransaction.innerHTML = `<i class=\"fa-solid fa-dollar-sign\"></i> ${newAmountOfTransaction}`;\n\n//   if (newAmountOfTransaction > 0) {\n//     const isExpense = Array.from(currentExpenses).includes(transactionToEdit);\n\n//     if (isExpense) {\n//       transactionToEdit.classList.remove(\"transactions__item--expense\");\n//       transactionToEdit.classList.add(\"transactions__item--income\");\n//       expensesBox.removeChild(transactionToEdit);\n//       incomesBox.appendChild(transactionToEdit);\n//     }\n//   } else {\n//     const isIncome = Array.from(currentIncomes).includes(transactionToEdit);\n\n//     if (isIncome) {\n//       transactionToEdit.classList.remove(\"transactions__item--income\");\n//       transactionToEdit.classList.add(\"transactions__item--expense\");\n//       incomesBox.removeChild(transactionToEdit);\n//       expensesBox.appendChild(transactionToEdit);\n//     }\n//   }\n\n//   moneyArray[indexOfTransactionToEdit] = newAmountOfTransaction;\n//   calculateBalance(moneyArray);\n// }","import {confirmationModal} from \"../main.js\";\r\nimport {deleteAllTransactions} from \"../data/transactions.js\";\r\n\r\nexport const openConfirmationModal = () => {\r\n  confirmationModal.classList.add(\"confirmation-modal--open\");\r\n  confirmationModal.querySelector(\".confirmation-modal__button--confirm\").removeEventListener(\"click\", deleteAllTransactions);\r\n  confirmationModal.querySelector(\".confirmation-modal__button--confirm\").addEventListener(\"click\", deleteAllTransactions);\r\n}\r\n\r\nexport const closeConfirmationModal = () => {\r\n  confirmationModal.classList.remove(\"confirmation-modal--open\");\r\n}","import {rootElement, walletIcon} from \"../main.js\";\r\n\r\nexport const switchToLightMode = () => {\r\n  rootElement.style.setProperty(\"--darkColor\", \"#f0ebd8\");\r\n  rootElement.style.setProperty(\"--lightColor\", \"#0d1321\");\r\n  walletIcon.style.setProperty(\"stroke\", \"#0d1321\");\r\n}\r\n\r\nexport const switchToDarkMode = () => {\r\n  rootElement.style.setProperty(\"--darkColor\", \"#0d1321\");\r\n  rootElement.style.setProperty(\"--lightColor\", \"#f0ebd8\");\r\n  walletIcon.style.setProperty(\"stroke\", \"#f0ebd8\");\r\n};"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","categorySelect","value","categoryIcon","inputValue","trim","charAt","toUpperCase","slice","toLowerCase","amount","Math","round","parseFloat","toFixed","moneyArray","balance","reduce","accumulator","currentValue","availableMoney","classList","add","remove","textContent","deleteAllTransactions","incomesList","innerHTML","expensesList","style","color","confirmationModal","displayError","formControl","errorMessage","error","closest","querySelector","removeError","checkForErrors","panel","inputs","hasErrors","forEach","input","contains","newTransaction","document","createElement","id","transactionId","checkCategory","amountFormatted","formatCurrency","amountInput","transactionItem","content","cloneNode","concat","formatInputName","nameInput","addEventListener","event","openEditionPanel","transactionToDelete","target","amountToDelete","transactionIndex","indexOf","removeChild","splice","calculateBalance","deleteTransaction","appendChild","push","createNewTransaction","closePanel","_ref","preventDefault","minLength","maxLength","length","checkName","isNaN","checkAmount","checkSelect","rootElement","footerYear","walletIcon","addTransactionBtn","deleteAllBtn","lightCircle","darkCircle","transactionPanel","closePanelBtn","editionPanel","nameToEditInput","amountToEditInput","categoryToEditSelect","closeEditionPanelBtn","cancelDeletionButton","openTransactionPanel","focus","handleFormSubmit","transaction","transactionName","transactionAmount","editTransaction","selectedIndex","clearInputs","clearErrors","openConfirmationModal","removeEventListener","closeConfirmationModal","switchToLightMode","setProperty","switchToDarkMode","window","now","documentElement","Date","getFullYear"],"sourceRoot":""}