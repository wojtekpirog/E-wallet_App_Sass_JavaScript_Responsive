{"version":3,"file":"bundle.min.js","mappings":"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","sources":["webpack://e-wallet_app/webpack/bootstrap","webpack://e-wallet_app/webpack/runtime/define property getters","webpack://e-wallet_app/webpack/runtime/hasOwnProperty shorthand","webpack://e-wallet_app/./src/js/footer.js","webpack://e-wallet_app/./src/js/utils/input_name.js","webpack://e-wallet_app/./src/js/panel/form_validation.js","webpack://e-wallet_app/./src/js/utils/color_mode.js","webpack://e-wallet_app/./src/js/main.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { footerYear } from \"./main.js\";\r\n\r\nconst setFooterYear = () => {\r\n  const now = new Date();\r\n  footerYear.textContent = now.getFullYear();\r\n}\r\n\r\nexport default setFooterYear;","function formatInputName(inputId) {\r\n  return inputId.charAt(0).toUpperCase() + inputId.slice(1).toLowerCase();\r\n}\r\n\r\nexport default formatInputName;","import {transactionId} from \"../main.js\";\r\nimport formatInputName from \"../utils/input_name.js\";\r\n\r\nconst handleFormSubmit = (event, {panel, nameInput, amountInput, categorySelect}, transactionId) => {\r\n  event.preventDefault();\r\n  \r\n  checkName(nameInput);\r\n  checkAmount(amountInput);\r\n  checkSelect(categorySelect);\r\n\r\n  const inputs = [nameInput, amountInput, categorySelect];\r\n  checkForErrors(event, panel, inputs, transactionId);\r\n}\r\n\r\nconst checkName = (nameInput) => {\r\n  const minLength = nameInput.minLength;\r\n  const maxLength = nameInput.maxLength;\r\n\r\n  if (!nameInput.value) {\r\n    displayError(nameInput, `${formatInputName(nameInput.id)} must be provided.`);\r\n  } else if (nameInput.value.length < minLength || nameInput.value.length > maxLength) {\r\n    displayError(nameInput, `${formatInputName(nameInput.id)} must be between ${minLength} and ${maxLength} characters long.`);\r\n  } else {\r\n    removeError(nameInput);\r\n  }\r\n}\r\n\r\nconst checkAmount = (amountInput) => {\r\n  const amount = parseFloat(amountInput.value);\r\n\r\n  if (isNaN(amount)) {\r\n    displayError(amountInput, `${formatInputName(amountInput.id)} must be provided.`);\r\n  } else if (amount === 0) {\r\n    displayError(amountInput, `${formatInputName(amountInput.id)} cannot be equal to zero.`);\r\n  } else {\r\n    removeError(amountInput);\r\n  }\r\n}\r\n\r\nconst checkSelect = (categorySelect) => {\r\n  categorySelect.value === \"none\"\r\n    ? displayError(categorySelect, `${formatInputName(categorySelect.id)} must be selected.`)\r\n    : removeError(categorySelect);\r\n}\r\n\r\nconst displayError = (formControl, errorMessage) => {\r\n  const error = formControl.closest(\".transaction-panel__control-box\").querySelector(\".transaction-panel__error\");\r\n  error.classList.add(\"transaction-panel__error--active\");\r\n  error.textContent = errorMessage;\r\n  formControl.classList.add(\"transaction-panel__input--error\");\r\n}\r\n\r\nconst removeError = (formControl) => {\r\n  const error = formControl.closest(\".transaction-panel__control-box\").querySelector(\".transaction-panel__error\");\r\n  error.classList.remove(\"transaction-panel__error--active\");\r\n  error.textContent = \"\";\r\n  formControl.classList.remove(\"transaction-panel__input--error\");\r\n}\r\n\r\nconst checkForErrors = (event, panel, inputs, transactionId) => {\r\n  let hasErrors = false;\r\n\r\n  inputs.forEach((input) => {\r\n    input.classList.contains(\"transaction-panel__input--error\") \r\n      ? hasErrors = true\r\n      : hasErrors = false;\r\n  });\r\n\r\n  if (!hasErrors) {\r\n    clearErrors(inputs);\r\n  }\r\n}\r\n\r\nconst clearErrors = (inputs) => {\r\n  // document.querySelectorAll(\".transaction-panel__error\").forEach(error => error.style.display = \"none\");\r\n  inputs.forEach((input) => {\r\n    input.classList.remove(\"transaction-panel__input--error\");\r\n    input.closest(\".transaction-panel__control-box\").querySelector(\".transaction-panel__error\").classList.remove(\"transaction-panel__error--active\");\r\n  });\r\n}\r\n\r\nexport default handleFormSubmit;","import {rootElement, walletIcon} from \"../main.js\";\r\n\r\nexport const switchToLightMode = () => {\r\n  rootElement.style.setProperty(\"--darkColor\", \"#f0ebd8\");\r\n  rootElement.style.setProperty(\"--lightColor\", \"#0d1321\");\r\n  walletIcon.style.setProperty(\"stroke\", \"#0d1321\");\r\n}\r\n\r\nexport const switchToDarkMode = () => {\r\n  rootElement.style.setProperty(\"--darkColor\", \"#0d1321\");\r\n  rootElement.style.setProperty(\"--lightColor\", \"#f0ebd8\");\r\n  walletIcon.style.setProperty(\"stroke\", \"#f0ebd8\");\r\n};","import setFooterYear from \"./footer.js\";\nimport calculateBalance from \"./utils/balance.js\";\nimport checkCategory from \"./utils/category.js\";\nimport handleFormSubmit from \"./panel/form_validation.js\";\nimport {switchToDarkMode, switchToLightMode} from \"./utils/color_mode.js\";\n\n// Root element\nexport let rootElement;\n// Footer year\nexport let footerYear;\n// Wallet icon\nexport let walletIcon;\n// Boxes for transactions\nlet incomesBox;\nlet expensesBox;\n// Category icon\nexport let categoryIcon;\n// Buttons for transactions\nlet addTransactionBtn;\nlet deleteTransactionBtn;\nlet deleteAllBtn;\n// Light and dark mode buttons\nlet lightCircle;\nlet darkCircle;\n// Transaction creation panel\nlet transactionPanel;\nlet nameInput;\nlet amountInput;\nexport let categorySelect;\nlet categorySelectArrow;\nlet saveBtn;\nlet cancelBtn;\nlet closePanelBtn;\n// Transaction edition panel\nlet editTransactionPanel;\nlet nameToEditInput;\nlet amountToEditInput;\nlet categoryToEditSelect;\nlet categoryToEditSelectArrow;\nlet saveEditionBtn;\nlet cancelEditionBtn;\nlet closeEditionPanelBtn;\n// Confirmation modal\nlet confirmationModal;\nlet confirmDeletionButton;\nlet doNotConfirmDeletionButton;\n// Edition modal\nlet editionModal;\n\n// Transaction number\nexport let transactionId = 0;\n// Amounts array\nexport let moneyArray = [0];\n// Balance info\nexport let availableMoney;\n\nconst main = () => {\n  getElements();\n  addEventListeners();\n  setFooterYear(); \n}\n\nconst getElements = () => {\n  // Root element\n  rootElement = document.documentElement;\n  // Footer year\n  footerYear = document.querySelector(\".footer__year\");\n  // Wallet icon\n  walletIcon = document.querySelector(\".header__title-icon\");\n  // Balance info\n  availableMoney = document.querySelector(\".options__balance > span\");\n  // Boxes for transactions\n  incomesBox = document.querySelector(\".incomes-box\");\n  expensesBox = document.querySelector(\".expenses-box\");\n  // Buttons for transactions\n  addTransactionBtn = document.querySelector(\".options__controls-btn--add\");\n  deleteTransactionBtn = document.querySelector(\".incomes-box__item-amount-btn\");\n  deleteAllBtn = document.querySelector(\".options__controls-btn--deleteAll\");\n  // Light and dark mode buttons\n  lightCircle = document.querySelector(\".options__style-button--light\");\n  darkCircle = document.querySelector(\".options__style-button--dark\");\n  // Transaction creation panel\n  transactionPanel = document.querySelector(\".transaction-panel--create\");\n  nameInput = transactionPanel.querySelector(\"#name\");\n  amountInput = transactionPanel.querySelector(\"#amount\");\n  categorySelect = transactionPanel.querySelector(\"#category\");\n  categorySelectArrow = transactionPanel.querySelector(\".transaction-panel__arrow\");\n  closePanelBtn = transactionPanel.querySelector(\".transaction-panel__xmark\");\n  // Transaction edition panel\n  editTransactionPanel = document.querySelector(\".transaction-panel--edit\");\n  nameToEditInput = editTransactionPanel.querySelector(\"#name-to-edit\");\n  amountToEditInput = editTransactionPanel.querySelector(\"#amount-to-edit\");\n  categoryToEditSelect = editTransactionPanel.querySelector(\"#category-to-edit\");\n  categoryToEditSelectArrow = editTransactionPanel.querySelector(\".transaction-panel__arrow\");\n  closeEditionPanelBtn = editTransactionPanel.querySelector(\".transaction-panel__xmark\");\n  // Confirmation modal\n  confirmationModal = document.querySelector(\".confirmation-modal\");\n  confirmDeletionButton = document.querySelector(\".confirmation-modal__button--confirm\");\n  doNotConfirmDeletionButton = document.querySelector(\".confirmation-modal__button--cancel\");\n  // Edition modal\n  editionModal = document.querySelector(\".edition-modal\");\n} \n\nconst addEventListeners = () => {\n  addTransactionBtn.addEventListener(\"click\", openTransactionPanel);\n  deleteAllBtn.addEventListener(\"click\", showConfirmationModal);\n  closePanelBtn.addEventListener(\"click\", () => closeTransactionPanel(nameInput, amountInput, categorySelect, categorySelectArrow, transactionPanel));\n  closeEditionPanelBtn.addEventListener(\"click\", () => closeTransactionPanel(nameToEditInput, amountToEditInput, categoryToEditSelect, categoryToEditSelectArrow, editTransactionPanel));\n  lightCircle.addEventListener(\"click\", switchToLightMode);\n  darkCircle.addEventListener(\"click\", switchToDarkMode);\n  confirmDeletionButton.addEventListener(\"click\", deleteAllTransactions);\n  doNotConfirmDeletionButton.addEventListener(\"click\", hideConfirmationModal);\n} \n\nconst openTransactionPanel = () => {\n  transactionPanel.classList.add(\"active\");\n  transactionPanel.querySelector(\".transaction-panel__button--save\").addEventListener(\"click\", (event) => handleFormSubmit(event, {panel: transactionPanel, nameInput, amountInput, categorySelect}));\n  transactionPanel.querySelector(\".transaction-panel__button--cancel\").addEventListener(\"click\", () => closeTransactionPanel(nameInput, amountInput, categorySelect, categorySelectArrow, transactionPanel));\n}\n\n\nconst openEditionPanel = (transactionId) => {\n  editTransactionPanel.classList.add(\"active\");\n  editTransactionPanel.querySelector(\".transaction-panel__button--edit\").addEventListener(\"click\", (event) => handleFormSubmit(event, nameToEditInput, amountToEditInput, categoryToEditSelect, editTransactionPanel, transactionId));\n  editTransactionPanel.querySelector(\".transaction-panel__button--cancel\").addEventListener(\"click\", () => closeTransactionPanel(nameToEditInput, amountToEditInput, categoryToEditSelect, categoryToEditSelectArrow, editTransactionPanel));\n}\n\nconst editTransaction = (transactionId) => {\n  const currentIncomes = incomesBox.children;\n  const currentExpenses = expensesBox.children;\n\n  const transactionToEdit = document.getElementById(transactionId);\n  const amountOfTransactionToEdit = parseFloat(transactionToEdit.childNodes[9].childNodes[1].innerText.slice(1));\n  const indexOfTransactionToEdit = moneyArray.indexOf(amountOfTransactionToEdit);\n\n  const currentNameOfTransaction = transactionToEdit.querySelector(\".transactions__item-name\");\n  const currentAmountOfTransaction = transactionToEdit.querySelector(\".transactions__item-amount-text\");\n\n  const newNameOfTransaction = nameToEditInput.value;\n  const newAmountOfTransaction = parseFloat(amountToEditInput.value);\n\n  checkCategory(categoryToEditSelect);\n\n  currentNameOfTransaction.innerHTML = `${categoryIcon} ${newNameOfTransaction.charAt(0).toUpperCase() + newNameOfTransaction.slice(1)}`;\n  currentAmountOfTransaction.innerHTML = `<i class=\"fa-solid fa-dollar-sign\"></i> ${newAmountOfTransaction}`;\n\n  if (newAmountOfTransaction > 0) {\n    const isExpense = Array.from(currentExpenses).includes(transactionToEdit);\n\n    if (isExpense) {\n      transactionToEdit.classList.remove(\"transactions__item--expense\");\n      transactionToEdit.classList.add(\"transactions__item--income\");\n      expensesBox.removeChild(transactionToEdit);\n      incomesBox.appendChild(transactionToEdit);\n    }\n  } else {\n    const isIncome = Array.from(currentIncomes).includes(transactionToEdit);\n\n    if (isIncome) {\n      transactionToEdit.classList.remove(\"transactions__item--income\");\n      transactionToEdit.classList.add(\"transactions__item--expense\");\n      incomesBox.removeChild(transactionToEdit);\n      expensesBox.appendChild(transactionToEdit);\n    }\n  }\n\n  moneyArray[indexOfTransactionToEdit] = newAmountOfTransaction;\n  calculateBalance(moneyArray);\n}\n  \nconst closeTransactionPanel = (name, amount, category, categoryArrow, panel) => {\n  clearElements(name, amount, category, categoryArrow);\n  // clearErrors(); \n  panel.classList.remove(\"active\");\n}\n\nconst clearElements = (name, amount, category, categoryArrow) => {\n  name.value = \"\";\n  name.classList.remove(\"transaction-panel__input--error\");\n  amount.value = \"\";\n  amount.classList.remove(\"transaction-panel__input--error\");\n  category.selectedIndex = 0;\n  category.classList.remove(\"transaction-panel__input--error\");\n  categoryArrow.classList.remove(\"transaction-panel__arrow--error\");\n}\n\n// const handleFormSubmit = (event, name, amount, category, panel, transactionId) => {\n//   event.preventDefault(); \n\n//   validateInputs([name, amount]);\n//   validateSelect(category);\n//   checkLength(name);\n//   checkForErrors(event, name, amount, category, panel, transactionId);\n// }\n\n// const validateInputs = (inputs) => {\n//   inputs.forEach((input) => {\n//     if (input.value === \"\") {\n//       displayError(input, `${input.id.charAt(0).toUpperCase() + input.id.slice(1)} cannot be empty!`);\n//     } else if (input.value === \"0\") {\n//       displayError(input, `${input.id.charAt(0).toUpperCase() + input.id.slice(1)} cannot be equal to zero!`);\n//     } else {\n//       removeError(input);\n//     }\n//   });\n// }\n\n// const validateSelect = (categorySelect) => {\n//   if (categorySelect.value === \"none\") {\n//     displayError(categorySelect, `${categorySelect.id.charAt(0).toUpperCase() + categorySelect.id.slice(1)} must be selected!`);\n//   } else {\n//     removeError(categorySelect);\n//   }\n// }\n\n// const checkLength = (nameInput) => {\n//   if (nameInput.value.length < nameInput.minLength || nameInput.value.length > nameInput.maxLength) {\n//     displayError(nameInput, `${nameInput.id.charAt(0).toUpperCase() + nameInput.id.slice(1)} must be between ${nameInput.minLength} and ${nameInput.maxLength} characters!`);\n//   } else {\n//     removeError(nameInput);\n//   }\n// }\n\n// const checkForErrors = (event, name, amount, category, panel, transactionId) => {\n//   const editTransactionBtn = editTransactionPanel.querySelector(\".transaction-panel__button--edit\");\n//   const checkIcon = editTransactionPanel.querySelector(\"i.fa-solid.fa-check\");\n\n//   if (name.value !== \"\" && name.value.length >= name.minLength && name.value.length <= name.maxLength && name.value !== \"0\" && amount.value !== \"\" && amount.value !== \"0\" && category.value !== \"none\") {\n//     if (event.target === editTransactionBtn || event.target === checkIcon) {\n//       editTransaction(transactionId);\n//       closeTransactionPanel(nameToEditInput, amountToEditInput, categoryToEditSelect, categoryToEditSelectArrow, panel);\n//     } else {\n//       createNewTransaction();\n//       closeTransactionPanel(nameInput, amountInput, categorySelect, categorySelectArrow, panel);\n//     }\n//   }\n// }\n\nconst createNewTransaction = () => {\n  const newTransaction = document.createElement(\"div\");\n  newTransaction.setAttribute(\"id\", transactionId);\n  newTransaction.className = \"transactions__item\";\n  checkCategory(categorySelect);\n\n  const transactionsTemplate = document.querySelector(\".transactions__template\").content.cloneNode(true);\n  transactionsTemplate.querySelector(\".transactions__item-name\").innerHTML = `${categoryIcon} ${nameInput.value.charAt(0).toUpperCase() + nameInput.value.slice(1)}`;\n  transactionsTemplate.querySelector(\".transactions__item-amount-text\").innerHTML = `<i class=\"fa-solid fa-dollar-sign\"></i> ${amountInput.value}`;\n  transactionsTemplate.querySelector(\".transactions__item-amount-button--edit\").setAttribute(\"onclick\", `openEditionPanel(${transactionId})`);\n  transactionsTemplate.querySelector(\".transactions__item-amount-button--delete\").setAttribute(\"onclick\", `deleteTransaction(${transactionId})`);\n  newTransaction.appendChild(transactionsTemplate);\n\n  if (amountInput.value > 0) {\n    newTransaction.classList.add(\"transactions__item--income\");\n    incomesBox.appendChild(newTransaction);\n  } else {\n    newTransaction.classList.add(\"transactions__item--expense\");\n    expensesBox.appendChild(newTransaction);\n  }\n\n  moneyArray.push(parseFloat(amountInput.value));\n  calculateBalance(moneyArray);\n  transactionId++;\n}\n\nconst deleteTransaction = (id) => {\n  const transactionToDelete = document.getElementById(id);\n  const amountOfTransactionToDelete = parseFloat(transactionToDelete.childNodes[9].childNodes[1].innerText.slice(1));\n  const indexOfTransactionToDelete = moneyArray.indexOf(amountOfTransactionToDelete);\n\n  moneyArray.splice(indexOfTransactionToDelete, 1);\n  calculateBalance(moneyArray);\n  transactionToDelete.classList.contains(\"transactions__item--income\") ? incomesBox.removeChild(transactionToDelete) : expensesBox.removeChild(transactionToDelete);\n}\n\nconst showConfirmationModal = () => {\n  confirmationModal.style.display = \"flex\";\n}\n\nconst hideConfirmationModal = () => {\n  confirmationModal.style.display = \"none\";\n}\n\nconst deleteAllTransactions = () => {\n  incomesBox.innerHTML = '<h3 class=\"incomes-box__title\">Incomes</h3>';\n  expensesBox.innerHTML = '<h3 class=\"expenses-box__title\">Expenses</h3>';\n  moneyArray = [0];\n  availableMoney.textContent = \"0\";\n  availableMoney.style.color = \"#f0ebd8\";\n  hideConfirmationModal();\n}\n\nwindow.addEventListener(\"DOMContentLoaded\", main);"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","inputId","charAt","toUpperCase","slice","toLowerCase","displayError","formControl","errorMessage","error","closest","querySelector","classList","add","textContent","removeError","remove","clearErrors","inputs","forEach","input","event","_ref","transactionId","panel","hasErrors","nameInput","amountInput","categorySelect","preventDefault","minLength","maxLength","value","length","concat","formatInputName","id","checkName","amount","parseFloat","isNaN","checkAmount","checkSelect","contains","rootElement","footerYear","walletIcon","incomesBox","expensesBox","addTransactionBtn","deleteAllBtn","lightCircle","darkCircle","transactionPanel","categorySelectArrow","closePanelBtn","editTransactionPanel","nameToEditInput","amountToEditInput","categoryToEditSelect","categoryToEditSelectArrow","closeEditionPanelBtn","confirmationModal","confirmDeletionButton","doNotConfirmDeletionButton","availableMoney","switchToLightMode","style","setProperty","switchToDarkMode","openTransactionPanel","addEventListener","handleFormSubmit","closeTransactionPanel","name","category","categoryArrow","clearElements","selectedIndex","showConfirmationModal","display","hideConfirmationModal","deleteAllTransactions","innerHTML","color","window","now","document","documentElement","Date","getFullYear"],"sourceRoot":""}