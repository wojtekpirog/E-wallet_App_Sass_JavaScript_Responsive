{"version":3,"file":"bundle.min.js","mappings":"mBACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,sHCA3E,ICKHI,EDLSC,EAAkB,SAACC,GAC9B,OAAQA,GACN,IAAK,SACH,MAAO,qCACT,IAAK,aACH,MAAO,yCACT,IAAK,YACH,MAAO,wCACT,IAAK,OACH,MAAO,oCACT,IAAK,WACH,MAAO,4CACT,IAAK,OACH,MAAO,uCACT,IAAK,QACH,MAAO,0CACT,IAAK,SACH,MAAO,mCACT,IAAK,UACH,MAAO,2CACT,IAAK,QACH,MAAO,kCACT,QAEE,OADAC,QAAQC,KAAK,qBAADC,OAAsBH,IAC3B,uCAEb,ECnBaI,EAAuB,WAElCC,EAAiBC,UAAUC,IAAI,2BAE/BF,EAAiBG,cAAc,mCAAmCC,OACpE,EAgDaC,EAAa,SAACC,EAAOC,IAjBP,SAACA,GAC1BA,EAAOC,SAAQ,SAACC,GACdA,EAAMC,MAAQ,GACdD,EAAMR,UAAUU,OAAO,kCACzB,IAEAJ,EAAO,GAAGK,cAAgB,CAC5B,CAWEC,CAAYN,GATa,SAACA,GAE1BA,EAAOC,SAAQ,SAACC,GACdA,EAAMR,UAAUU,OAAO,mCACvBF,EAAMK,QAAQ,mCAAmCX,cAAc,6BAA6BF,UAAUU,OAAO,mCAC/G,GACF,CAIEI,CAAYR,GACZD,EAAML,UAAUU,OAAO,0BACzB,EC5DA,QAJA,SAAyBK,GACvB,OAAOA,EAAWC,OAAOC,OAAO,GAAGC,cAAgBH,EAAWC,OAAOG,MAAM,GAAGC,aAChF,E,sGCAA,IAmDMC,EAAe,SAACC,EAAaC,GACjC,IAAMC,EAAQF,EAAYT,QAAQ,mCAAmCX,cAAc,6BACnFsB,EAAMxB,UAAUC,IAAI,oCACpBuB,EAAMC,YAAcF,EACpBD,EAAYtB,UAAUC,IAAI,kCAC5B,EAEMyB,EAAc,SAACJ,GACnB,IAAME,EAAQF,EAAYT,QAAQ,mCAAmCX,cAAc,6BACnFsB,EAAMxB,UAAUU,OAAO,oCACvBc,EAAMC,YAAc,GACpBH,EAAYtB,UAAUU,OAAO,kCAC/B,EAOA,QAtEyB,SAACiB,EAAOrB,GAE/BqB,EAAMC,iBAEN,I,IAAAC,G,EAAuD,E,4CAANvB,I,s1BAA1CwB,EAASD,EAAA,GAAEE,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAEvCnC,EAAmBsC,EAAeC,QAAQD,EAAerB,eAM/D,OAGgB,SAACmB,GACjB,IAAMI,EAAYJ,EAAUI,UACtBC,EAAYL,EAAUK,UAEvBL,EAAUrB,MAEJqB,EAAUrB,MAAM2B,OAASF,GAAaJ,EAAUrB,MAAM2B,OAASD,EACxEd,EAAaS,EAAW,GAAFjC,OAAKwC,EAAgBP,EAAUQ,IAAG,qBAAAzC,OAAoBqC,EAAS,SAAArC,OAAQsC,EAAS,sBAEtGT,EAAYI,GAJZT,EAAaS,EAAW,GAAFjC,OAAKwC,EAAgBP,EAAUQ,IAAG,sBAM5D,CAlBEC,CAAUT,GAoBQ,SAACC,EAAarC,GAEhC,IAAM8C,EAASC,WAAWV,EAAYtB,OAElCiC,MAAMF,GACRnB,EAAaU,EAAa,GAAFlC,OAAKwC,EAAgBN,EAAYO,IAAG,uBACxC,IAAXE,EACTnB,EAAaU,EAAa,GAAFlC,OAAKwC,EAAgBN,EAAYO,IAAG,8BACnDE,EAAS,GAAK9C,EAAiB+B,YAAYkB,WAAW,SAC/DtB,EAAaU,EAAa,GAAFlC,OAAKwC,EAAgBN,EAAYO,IAAG,8CACnDE,EAAS,GAAK9C,EAAiB+B,YAAYkB,WAAW,SAC/DtB,EAAaU,EAAa,GAAFlC,OAAKwC,EAAgBN,EAAYO,IAAG,6CAE5DZ,EAAYK,EAEhB,CAlCEa,CAAYb,EAAarC,GAoCL,SAACsC,GACI,SAAzBA,EAAevB,MACXY,EAAaW,EAAgB,GAAFnC,OAAKwC,EAAgBL,EAAeM,IAAG,uBAClEZ,EAAYM,EAClB,CAvCEa,CAAcb,GAuDO,SAAC1B,GAEtB,OAAOA,EAAOwC,MAAK,SAACtC,GAAK,OAAKA,EAAMR,UAAU+C,SAAS,kCAAkC,GAC3F,CAxDSC,CAAe1C,EACxB,ECVA,EALuB,SAACkC,GAEtB,OAAQS,KAAKC,MAA2B,IAArBT,WAAWD,IAAiB,KAAKW,QAAQ,EAC9D,ECSA,EAVmC,SAACC,GAClC,IAAMC,EAAQC,EAAWC,WAAU,SAACC,GAAW,OAAKA,EAAYlB,KAAOc,CAAa,IAEpF,IAAe,IAAXC,EACF,OAAOA,EAEP1D,QAAQ6B,MAAM,uBAAD3B,OAAwBuD,EAAa,2CAEtD,E,ggCCDO,ICFIK,EAEAC,EAEAC,EAEAC,EAEAC,EACAC,EAEPC,EACAC,EAEAC,EACAC,EAEOnE,EACA+B,EACAC,EACAC,EACPmC,EACAC,EACAC,EAEOC,EACAC,EACAC,EACAC,EACPC,EACAC,EAEOC,EACPC,EAEAC,EACAC,EDlCOzB,EAAa,GAEbF,EAAgB,EAGrB4B,EAAgB,WACpBC,aAAaC,QAAQ,aAAcC,KAAKC,UAAU9B,GACpD,EAGa+B,EAAkB,WAE7B,IAAMC,EAAgBL,aAAaM,QAAQ,cAEvCD,IACFhC,EAAa6B,KAAKK,MAAMF,GAE5B,EAGaG,EAAqB,WAEhCC,IAEAL,IAEI/B,EAAWlB,OAAS,IAEtBkB,EAAW/C,SAAQ,SAACiD,GAElB,IAAMmC,EAAWC,SAASC,cAAc,MAElCC,EAAuBF,SAASC,cAAc,OAEpDC,EAAqBC,QAAQzD,GAAKkB,EAAYlB,GAE9C,IAAM0D,EAAqBJ,SAAS1F,cAAc,0BAA0B+F,QAAQC,WAAU,GAE9FF,EAAmB9F,cAAc,4BAA4BiG,UAAY,GAAHtG,OAAM2D,EAAY4C,aAAY,KAAAvG,OAAI2D,EAAY6C,MACpHL,EAAmB9F,cAAc,mCAAmCiG,UAAY,2CAAHtG,OAA8C2D,EAAYhB,QACvIwD,EAAmB9F,cAAc,2CAA2CoG,iBAAiB,SAAS,kBLnC5E,SAAClD,GAC/BzD,QAAQ4G,IAAI,0CAAD1G,OAA2CuD,IAEtDkB,EAAatE,UAAUC,IAAI,2BAE3BqE,EAAapE,cAAc,mCAAmCC,QAE9D,IAAM4E,EAAqB,CAACR,EAAiBC,EAAmBC,GAE1DjB,EAAcoC,SAAS1F,cAAc,aAADL,OAAcuD,EAAa,OAC/DoD,EAAkBhD,EAAYtD,cAAc,4BAA4BuB,YAAYT,OACpFyF,EAAoBjD,EAAYtD,cAAc,mCAAmCuB,YAAYT,OAG7F0F,EDAyB,SAACC,GAChC,OAAQA,GACN,IAAK,YACH,MAAO,SACT,IAAK,gBACH,MAAO,aACT,IAAK,eACH,MAAO,YACT,IAAK,WACH,MAAO,OACT,IAAK,mBACH,MAAO,WACT,IAAK,cACH,MAAO,OACT,IAAK,iBACH,MAAO,QACT,IAAK,UACH,MAAO,SACT,IAAK,kBACH,MAAO,UACT,IAAK,SACH,MAAO,QACT,QACEhH,QAAQC,KAAK,iBAADC,OAAkB8G,IAEpC,CCzB8BC,CAFJpD,EAAYtD,cAAc,gCAAgCF,UAAU,IAI5FsE,EAAapE,cAAc,mCAAmCO,MAAQ+F,EACtElC,EAAapE,cAAc,qCAAqCO,MAAQgG,EACxEnC,EAAapE,cAAc,8BAA8BO,MAAQiG,EAE7DlH,GACF8E,EAAapE,cAAc,oCAAoC2G,oBAAoB,QAASrH,GAG9FA,EAAyB,SAACmC,GAAK,OAAKmF,EAAgBnF,EAAOyB,EAAekB,EAAcS,EAAmB,EAE3GT,EAAapE,cAAc,oCAAoCoG,iBAAiB,QAAS9G,EAC3F,CKQkHuH,CAAiBvD,EAAYlB,GAAG,IAC5I0D,EAAmB9F,cAAc,6CAA6CoG,iBAAiB,SAAS,kBAAMU,EAAkBxD,EAAYlB,GAAG,IAE/IwD,EAAqBmB,YAAYjB,GAEjCL,EAASsB,YAAYnB,GAEjBrD,WAAWe,EAAYhB,QAAU,GACnCsD,EAAqB9F,UAAUC,IAAI,qBAAsB,8BACzD4D,EAAYoD,YAAYtB,KAExBG,EAAqB9F,UAAUC,IAAI,qBAAsB,+BACzD6D,EAAamD,YAAYtB,GAE7B,IE7DqB,SAACrC,GAExB,IAAI4D,EAAU5D,EAAW6D,QAAO,SAACC,EAAaC,GAC5C,OAAOD,EAAc3E,WAAW4E,EAAa7E,OAC/C,GAAG,GAIG8E,GAFNJ,EAAUzE,WAAWyE,EAAQ/D,QAAQ,KAEJoE,WAEjC3D,EAAenC,YAAc6F,EAE7B1D,EAAe5D,UAAUU,OAAO,6BAA8B,8BAE1DwG,EAAU,EACZtD,EAAe5D,UAAUC,IAAI,8BACpBiH,EAAU,GACnBtD,EAAe5D,UAAUC,IAAI,6BAEjC,CF4CIuH,CAAiBlE,GAErB,EAiCawD,EAAkB,SAACnF,EAAOyB,EAAekB,EAAchE,GAKlE,GAJAX,QAAQ4G,IAAI,4BAAD1G,OAA6BuD,KAElBqE,EAAiB9F,EAAOrB,GAE1B,CAElB,IAAAoH,EAAAC,EAAmErH,EAAM,GAAlEiE,EAAemD,EAAA,GAAElD,EAAiBkD,EAAA,GAAEjD,EAAoBiD,EAAA,GAEzDE,EAAmBvF,EAAgBkC,EAAgB9D,OAEnDoH,EAAkBpI,EAAgBgF,EAAqBhE,OAEvDqH,EAAqBC,EAAevD,EAAkB/D,OAEtDuH,EAAsBC,EAAoB7E,IAEnB,IAAzB4E,GACF1E,EAAW4E,OAAOF,EAAqB,EAAG,CACxC1F,GAAIc,EACJiD,KAAMuB,EACNxB,aAAcyB,EACdrF,OAAQsF,IAIZ9C,IAEAS,IAEArF,EAAWkE,EAAchE,EAC3B,CACF,EAEM0G,EAAoB,SAAC5D,GAEzB,IAAM+E,EAA2BF,EAAoB7E,GAErDE,EAAW4E,OAAOC,EAA0B,GAE5CnD,IAEAS,GACF,EAwCa2C,EAAwB,WAEnC9E,EAAa,GAEb0B,IAEAU,IAEAd,EAAkB5E,UAAUU,OAAO,2BACrC,EAEMgF,EAAa,WAEjB7B,EAAYsC,UAAY,GACxBrC,EAAaqC,UAAY,GAEzBvC,EAAenC,YAAc,IAC7BmC,EAAe5D,UAAUU,OAAO,6BAA8B,6BAChE,EGtMa2H,EAAwB,WACnCzD,EAAkB5E,UAAUC,IAAI,4BAChC2E,EAAkB1E,cAAc,wCAAwC2G,oBAAoB,QAASuB,GACrGxD,EAAkB1E,cAAc,wCAAwCoG,iBAAiB,QAAS8B,EACpG,EAEaE,EAAyB,WACpC1D,EAAkB5E,UAAUU,OAAO,2BACrC,ECTa6H,EAAoB,WAC/B9E,EAAY+E,MAAMC,YAAY,cAAe,WAC7ChF,EAAY+E,MAAMC,YAAY,eAAgB,WAC9C9E,EAAW6E,MAAMC,YAAY,SAAU,UACzC,EAEaC,EAAmB,WAC9BjF,EAAY+E,MAAMC,YAAY,cAAe,WAC7ChF,EAAY+E,MAAMC,YAAY,eAAgB,WAC9C9E,EAAW6E,MAAMC,YAAY,SAAU,UACzC,EH+FA7C,SAASU,iBAAiB,oBA9Db,WI3CS,IACdqC,EJoDNlF,EAAcmC,SAASgD,gBAEvBlF,EAAakC,SAAS1F,cAAc,iBAEpCyD,EAAaiC,SAAS1F,cAAc,uBAEpC0D,EAAiBgC,SAAS1F,cAAc,4BAExC2D,EAAc+B,SAAS1F,cAAc,sBACrC4D,EAAe8B,SAAS1F,cAAc,uBAEtC6D,EAAoB6B,SAAS1F,cAAc,+BAC3C8D,EAAe4B,SAAS1F,cAAc,qCAEtC+D,EAAc2B,SAAS1F,cAAc,iCACrCgE,EAAa0B,SAAS1F,cAAc,gCAEpCH,EAAmB6F,SAAS1F,cAAc,8BAC1C4B,EAAY/B,EAAiBG,cAAc,SAC3C6B,EAAchC,EAAiBG,cAAc,WAC7C8B,EAAiBjC,EAAiBG,cAAc,aAChDiE,EAAqBpE,EAAiBG,cAAc,oCACpDkE,EAAoBrE,EAAiBG,cAAc,sCACnDmE,EAAkBtE,EAAiBG,cAAc,6BAEjDoE,EAAesB,SAAS1F,cAAc,4BACtCqE,EAAkBD,EAAapE,cAAc,iBAC7CsE,EAAoBF,EAAapE,cAAc,mBAC/CuE,EAAuBH,EAAapE,cAAc,qBAClDwE,EAAmBJ,EAAapE,cAAc,sCAC9CyE,EAAyBL,EAAapE,cAAc,6BAEpD0E,EAAoBgB,SAAS1F,cAAc,uBAC3C2E,EAAuBe,SAAS1F,cAAc,uCAE9C4E,EAAyB,CAAChD,EAAWC,EAAaC,GAClD+C,EAAqB,CAACR,EAAiBC,EAAmBC,GAI1DV,EAAkBuC,iBAAiB,QAASxG,GAC5CkE,EAAasC,iBAAiB,QAAS+B,GACvCxD,EAAqByB,iBAAiB,QAASgC,GAC/CnE,EAAmBmC,iBAAiB,SAAS,SAAC3E,GAAK,OD7BjB,SAACA,EAAO5B,EAAkBO,GAI5D,IAFuBmH,EAAiB9F,EAAOrB,GAE1B,CAEnB8C,IAEA,IAAAvB,EAAA8F,EAAiDrH,EAAM,GAAhDwB,EAASD,EAAA,GAAEE,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAEvCgH,EAAgBxG,EAAgBP,EAAUrB,OAE1C2F,EAAe3G,EAAgBuC,EAAevB,OAE9CqI,EAAkBf,EAAehG,EAAYtB,OAEnD6C,EAAWyF,KAAK,CACdzG,GAAIc,EACJiD,KAAMwC,EACNzC,aAAcA,EACd5D,OAAQsG,IAGV9D,IAEAS,IAEArF,EAAWL,EAAkBO,EAC/B,CACF,CCA0D0I,CAAqBrH,EAAO5B,EAAkB+E,EAAuB,IAC7HV,EAAkBkC,iBAAiB,SAAS,kBAAMlG,EAAWL,EAAkB+E,EAAuB,IACtGJ,EAAiB4B,iBAAiB,SAAS,kBAAMlG,EAAWkE,EAAcS,EAAmB,IAC7FV,EAAgBiC,iBAAiB,SAAS,kBAAMlG,EAAWL,EAAkB+E,EAAuB,IACpGH,EAAuB2B,iBAAiB,SAAS,kBAAMlG,EAAWkE,EAAcS,EAAmB,IACnGd,EAAYqC,iBAAiB,QAASiC,GACtCrE,EAAWoC,iBAAiB,QAASoC,GIrG/BC,EAAM,IAAIM,KAChBvF,EAAWjC,YAAckH,EAAIO,cJ6C7B7D,IACAI,GACF,G","sources":["webpack://e-wallet_app/webpack/bootstrap","webpack://e-wallet_app/webpack/runtime/define property getters","webpack://e-wallet_app/webpack/runtime/hasOwnProperty shorthand","webpack://e-wallet_app/./src/js/utils/category.js","webpack://e-wallet_app/./src/js/panel/transaction_panel.js","webpack://e-wallet_app/./src/js/utils/input_name.js","webpack://e-wallet_app/./src/js/panel/form_validation.js","webpack://e-wallet_app/./src/js/utils/money.js","webpack://e-wallet_app/./src/js/utils/transaction.js","webpack://e-wallet_app/./src/js/data/transactions.js","webpack://e-wallet_app/./src/js/main.js","webpack://e-wallet_app/./src/js/utils/balance.js","webpack://e-wallet_app/./src/js/modal/modal.js","webpack://e-wallet_app/./src/js/utils/color_mode.js","webpack://e-wallet_app/./src/js/footer.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export const getCategoryIcon = (selectedCategory) => {\r\n  switch (selectedCategory) {\r\n    case \"salary\":\r\n      return `<i class=\"fa-solid fa-wallet\"></i>`;\r\n    case \"investment\":\r\n      return `<i class=\"fa-solid fa-chart-line\"></i>`;\r\n    case \"freelance\":\r\n      return `<i class=\"fa-solid fa-briefcase\"></i>`;\r\n    case \"rent\":\r\n      return `<i class=\"fa-solid fa-house\"></i>`;\r\n    case \"shopping\":\r\n      return `<i class=\"fa-solid fa-cart-shopping\"></i>`;\r\n    case \"food\":\r\n      return `<i class=\"fa-solid fa-utensils\"></i>`;\r\n    case \"bills\":\r\n      return `<i class=\"fa-solid fa-credit-card\"></i>`;\r\n    case \"cinema\":\r\n      return `<i class=\"fa-solid fa-film\"></i>`;\r\n    case \"leisure\":\r\n      return `<i class=\"fa-solid fa-glass-cheers\"></i>`;\r\n    case \"other\":\r\n      return `<i class=\"fa-solid fa-pen\"></i>`;\r\n    default: // Handle an unknown category\r\n      console.warn(`Unknown category: ${selectedCategory}`);\r\n      return `<i class=\"fa-solid fa-question\"></i>`;\r\n  }\r\n};\r\n\r\nexport const getCategoryByIcon = (transactionIcon) => {\r\n  switch (transactionIcon) {\r\n    case \"fa-wallet\":\r\n      return \"salary\";\r\n    case \"fa-chart-line\":\r\n      return \"investment\";\r\n    case \"fa-briefcase\":\r\n      return \"freelance\";\r\n    case \"fa-house\":\r\n      return \"rent\";\r\n    case \"fa-cart-shopping\":\r\n      return \"shopping\";\r\n    case \"fa-utensils\":\r\n      return \"food\";\r\n    case \"fa-credit-card\":\r\n      return \"bills\";\r\n    case \"fa-film\":\r\n      return \"cinema\";\r\n    case \"fa-glass-cheers\":\r\n      return \"leisure\";\r\n    case \"fa-pen\":\r\n      return \"other\";\r\n    default: // Handle an unknown icon\r\n      console.warn(`Unknown icon: ${transactionIcon}`);\r\n  }\r\n}","import {transactionPanel, editionPanel, nameToEditInput, amountToEditInput, categoryToEditSelect} from \"../main.js\";\r\nimport {editTransaction} from \"../data/transactions.js\";\r\nimport {getCategoryByIcon} from \"../utils/category.js\";\r\n\r\n// Store a reference to the last transaction edition function added as an event listener, in a variable\r\nlet currentEditTransaction;\r\n\r\nexport const openTransactionPanel = () => {\r\n  // Open the transaction panel\r\n  transactionPanel.classList.add(\"transaction-panel--open\");\r\n  // Put focus on the name input\r\n  transactionPanel.querySelector(\".transaction-panel__input--name\").focus();\r\n}\r\n\r\nexport const openEditionPanel = (transactionId) => {\r\n  console.log(`Otwieram panel edycji transakcji z ID: ${transactionId}`);\r\n  // Open the edition panel\r\n  editionPanel.classList.add(\"transaction-panel--open\");\r\n  // Put focus on the name input\r\n  editionPanel.querySelector(\".transaction-panel__input--name\").focus();\r\n  // Get the inputs\r\n  const editionPanelInputs = [nameToEditInput, amountToEditInput, categoryToEditSelect];\r\n  // Get the transaction and its details\r\n  const transaction = document.querySelector(`[data-id=\"${transactionId}\"]`);\r\n  const transactionName = transaction.querySelector(\".transactions__item-name\").textContent.trim();\r\n  const transactionAmount = transaction.querySelector(\".transactions__item-amount-text\").textContent.trim();\r\n  const transactionIcon = transaction.querySelector(\".transactions__item-name > i\").classList[1];\r\n  // Get the transaction category's name by category icon\r\n  const transactionCategory = getCategoryByIcon(transactionIcon);\r\n  // Fill the inputs with values from `transactionName`, `transactionAmount` and `transactionCategory`\r\n  editionPanel.querySelector(\".transaction-panel__input--name\").value = transactionName;\r\n  editionPanel.querySelector(\".transaction-panel__input--amount\").value = transactionAmount;\r\n  editionPanel.querySelector(\".transaction-panel__select\").value = transactionCategory;\r\n  // Remove the old event listener if it exists (the function plugged into the new listener must have the same reference as the function plugged into the old listener)\r\n  if (currentEditTransaction) {\r\n    editionPanel.querySelector(\".transaction-panel__button--edit\").removeEventListener(\"click\", currentEditTransaction);\r\n  }\r\n  // Create a new event listener and save a reference to it in `currentEditTransaction`\r\n  currentEditTransaction = (event) => editTransaction(event, transactionId, editionPanel, editionPanelInputs);\r\n  // Add a new event listener\r\n  editionPanel.querySelector(\".transaction-panel__button--edit\").addEventListener(\"click\", currentEditTransaction);\r\n}\r\n\r\nexport const clearInputs = (inputs) => {\r\n  inputs.forEach((input) => {\r\n    input.value = \"\";\r\n    input.classList.remove(\"transaction-panel__input--error\");\r\n  });\r\n\r\n  inputs[2].selectedIndex = 0;\r\n}\r\n\r\nexport const clearErrors = (inputs) => {\r\n  // document.querySelectorAll(\".transaction-panel__error\").forEach(error => error.style.display = \"none\");\r\n  inputs.forEach((input) => {\r\n    input.classList.remove(\"transaction-panel__input--error\");\r\n    input.closest(\".transaction-panel__control-box\").querySelector(\".transaction-panel__error\").classList.remove(\"transaction-panel__error--active\");\r\n  });\r\n}\r\n\r\nexport const closePanel = (panel, inputs) => {\r\n  clearInputs(inputs);\r\n  clearErrors(inputs);\r\n  panel.classList.remove(\"transaction-panel--open\");\r\n}","function formatInputName(inputValue) {\r\n  return inputValue.trim().charAt(0).toUpperCase() + inputValue.trim().slice(1).toLowerCase();\r\n}\r\n\r\nexport default formatInputName;","import formatInputName from \"../utils/input_name.js\";\n\nconst handleFormSubmit = (event, inputs) => {\n  // Prevent page reload\n  event.preventDefault();\n  // Destructure the `inputs` array\n  const [nameInput, amountInput, categorySelect] = inputs;\n  // Get the current option from categorySelect\n  const selectedCategory = categorySelect.options[categorySelect.selectedIndex];\n  // Validate the inputs\n  checkName(nameInput);\n  checkAmount(amountInput, selectedCategory);\n  checkCategory(categorySelect);\n  // Check whether there are any errors and return `true` if there are any errors, otherwise return `false`\n  return checkForErrors(inputs);\n}\n\nconst checkName = (nameInput) => {\n  const minLength = nameInput.minLength;\n  const maxLength = nameInput.maxLength;\n\n  if (!nameInput.value) {\n    displayError(nameInput, `${formatInputName(nameInput.id)} must be provided.`);\n  } else if (nameInput.value.length < minLength || nameInput.value.length > maxLength) {\n    displayError(nameInput, `${formatInputName(nameInput.id)} must be between ${minLength} and ${maxLength} characters long.`);\n  } else {\n    removeError(nameInput);\n  }\n}\n\nconst checkAmount = (amountInput, selectedCategory) => {\n  // Get the amount of the transaction\n  const amount = parseFloat(amountInput.value);\n\n  if (isNaN(amount)) {\n    displayError(amountInput, `${formatInputName(amountInput.id)} must be provided.`);\n  } else if (amount === 0) {\n    displayError(amountInput, `${formatInputName(amountInput.id)} cannot be equal to zero.`);\n  } else if (amount > 0 && selectedCategory.textContent.startsWith(\"[ - ]\")) {\n    displayError(amountInput, `${formatInputName(amountInput.id)} must be a negative value for an expense.`);\n  } else if (amount < 0 && selectedCategory.textContent.startsWith(\"[ + ]\")) {\n    displayError(amountInput, `${formatInputName(amountInput.id)} must be a positive value for an income.`);\n  } else {\n    removeError(amountInput);\n  }\n}\n\nconst checkCategory = (categorySelect) => {\n  categorySelect.value === \"none\"\n    ? displayError(categorySelect, `${formatInputName(categorySelect.id)} must be selected.`)\n    : removeError(categorySelect);\n}\n\nconst displayError = (formControl, errorMessage) => {\n  const error = formControl.closest(\".transaction-panel__control-box\").querySelector(\".transaction-panel__error\");\n  error.classList.add(\"transaction-panel__error--active\");\n  error.textContent = errorMessage;\n  formControl.classList.add(\"transaction-panel__input--error\");\n}\n\nconst removeError = (formControl) => {\n  const error = formControl.closest(\".transaction-panel__control-box\").querySelector(\".transaction-panel__error\");\n  error.classList.remove(\"transaction-panel__error--active\");\n  error.textContent = \"\";\n  formControl.classList.remove(\"transaction-panel__input--error\");\n}\n\nconst checkForErrors = (inputs) => {\n  // Use `some` to return `true` if at least one input in the `inputs` array contains an error, otherwise return `false`\n  return inputs.some((input) => input.classList.contains(\"transaction-panel__input--error\"));\n}\n\nexport default handleFormSubmit;","const formatCurrency = (amount) => {\r\n  // It a convention that the formatted monetary value is returned as a string\r\n  return (Math.round(parseFloat(amount) * 100) / 100).toFixed(2);\r\n} \r\n\r\nexport default formatCurrency;","import {moneyArray} from \"../data/transactions.js\";\r\n\r\nexport const getTransactionIndex = (transactionId) => {\r\n  const index = moneyArray.findIndex((transaction) => transaction.id === transactionId);\r\n\r\n  if (index !== -1) {\r\n    return index;\r\n  } else {\r\n    console.error(`Transaction with ID ${transactionId} not found in the list of transactions.`);\r\n  }\r\n}\r\n\r\nexport default getTransactionIndex;","import {availableMoney, incomesList, expensesList, confirmationModal} from \"../main.js\";\nimport {openEditionPanel, closePanel} from \"../panel/transaction_panel.js\";\nimport handleFormSubmit from \"../panel/form_validation.js\";\nimport {getCategoryIcon} from \"../utils/category.js\";\nimport formatInputName from \"../utils/input_name.js\";\nimport formatCurrency from \"../utils/money.js\";\nimport calculateBalance from \"../utils/balance.js\";\nimport getTransactionIndex from \"../utils/transaction.js\";\n// Array to store information about transactions\nexport let moneyArray = [];\n// Transaction Id\nexport let transactionId = 0;\n\n// Function to save data in Local Storage\nconst saveToStorage = () => {\n  localStorage.setItem(\"moneyArray\", JSON.stringify(moneyArray));\n}\n\n// Function to load data from Local Storage\nexport const loadFromStorage = () => {\n  // Get data from Local Storage\n  const storedAmounts = localStorage.getItem(\"moneyArray\");\n  // Update `moneyArray` with the data from Local Storage\n  if (storedAmounts) {\n    moneyArray = JSON.parse(storedAmounts);\n  }\n}\n\n// Function to render transactions from `moneyArray`\nexport const renderTransactions = () => {\n  // Reset both incomesList and expensesList and balance info in availableMoney\n  clearStuff();\n  // Load transactions from Local Storage (get updated `moneyArray`)\n  loadFromStorage();\n  // Render transactions from `moneyArray`, if there are any\n  if (moneyArray.length > 0) {\n    // Render HTML for each transaction in `moneyArray`\n    moneyArray.forEach((transaction) => {\n      // Create a list item\n      const listItem = document.createElement(\"li\");\n      // Create a container for a new transaction\n      const transactionContainer = document.createElement(\"div\");\n      // Give the new transaction a unique id as a data attribute\n      transactionContainer.dataset.id = transaction.id;\n      // Get a copy of the document fragment from template\n      const transactionElement = document.querySelector(\".transaction__template\").content.cloneNode(true);\n      // Fill in the transaction's data\n      transactionElement.querySelector(\".transactions__item-name\").innerHTML = `${transaction.categoryIcon} ${transaction.name}`;\n      transactionElement.querySelector(\".transactions__item-amount-text\").innerHTML = `<i class=\"fa-solid fa-dollar-sign\"></i> ${transaction.amount}`;\n      transactionElement.querySelector(\".transactions__item-amount-button--edit\").addEventListener(\"click\", () => openEditionPanel(transaction.id));\n      transactionElement.querySelector(\".transactions__item-amount-button--delete\").addEventListener(\"click\", () => deleteTransaction(transaction.id));\n      // Put the new transaction inside its container\n      transactionContainer.appendChild(transactionElement);\n      // Put the new transaction's container inside the list item (li) tag\n      listItem.appendChild(transactionContainer);\n      // If amount is positive, add a new income, otherwise add a new expense\n      if (parseFloat(transaction.amount) > 0) {\n        transactionContainer.classList.add(\"transactions__item\", \"transactions__item--income\");\n        incomesList.appendChild(listItem);\n      } else {\n        transactionContainer.classList.add(\"transactions__item\", \"transactions__item--expense\");\n        expensesList.appendChild(listItem);\n      }\n    });\n    // Recalculate the balance\n    calculateBalance(moneyArray);\n  }\n}\n\nexport const createNewTransaction = (event, transactionPanel, inputs) => {\n  // Return whether the form validation resulted in erros or not\n  const errorsOccurred = handleFormSubmit(event, inputs);\n  // If there are no errors, create a new transaction\n  if (!errorsOccurred) {\n    // Increment the transaction id\n    transactionId++;\n    // Destructure the `inputs` array\n    const [nameInput, amountInput, categorySelect] = inputs;\n    // Return the formatted transaction's name\n    const nameFormatted = formatInputName(nameInput.value);\n    // Return category icon based on selected category\n    const categoryIcon = getCategoryIcon(categorySelect.value);\n    // Return the monetary amount of the transaction\n    const amountFormatted = formatCurrency(amountInput.value);\n    // Create a new transaction as an object\n    moneyArray.push({\n      id: transactionId,\n      name: nameFormatted,\n      categoryIcon: categoryIcon,\n      amount: amountFormatted\n    });\n    // Save the newly updated `moneyArray` to LocalStorage\n    saveToStorage();\n    // Re-render the transactions\n    renderTransactions();\n    // Close the panel\n    closePanel(transactionPanel, inputs);\n  };\n}\n\nexport const editTransaction = (event, transactionId, editionPanel, inputs) => {\n  console.log(`Edytuję transakcje z ID: ${transactionId}`);\n  // Return whether the form validation resulted in erros or not\n  const errorsOccured = handleFormSubmit(event, inputs);\n  // If there are no errors, edit the transaction\n  if (!errorsOccured) {\n    // Destructure the `inputs` array\n    const [nameToEditInput, amountToEditInput, categoryToEditSelect] = inputs;\n    // Return the formatted new transaction's name\n    const newNameFormatted = formatInputName(nameToEditInput.value);\n    // Return category icon based on selected category\n    const newCategoryIcon = getCategoryIcon(categoryToEditSelect.value);\n    // Return the monetary amount of the transaction\n    const newAmountFormatted = formatCurrency(amountToEditInput.value);\n    // Get the index of the transaction to be edited in `moneyArray` based on its id\n    const oldTransactionIndex = getTransactionIndex(transactionId);\n    // Edit the old transaction in `moneyArray`\n    if (oldTransactionIndex !== -1) {\n      moneyArray.splice(oldTransactionIndex, 1, {\n        id: transactionId,\n        name: newNameFormatted,\n        categoryIcon: newCategoryIcon,\n        amount: newAmountFormatted\n      });\n    }\n    // Save the updated `moneyArray` to Local Storage\n    saveToStorage();\n    // Re-render the transactions\n    renderTransactions();\n    // Close the edition panel\n    closePanel(editionPanel, inputs);\n  }\n}\n\nconst deleteTransaction = (transactionId) => {\n  // Get the index of the transaction to be removed from `moneyArray` based on its id\n  const matchingTransactionIndex = getTransactionIndex(transactionId); \n  // Remove `matchingTransaction` from `moneyArray`\n  moneyArray.splice(matchingTransactionIndex, 1);\n  // Save the updated `moneyArray` to Local Storage\n  saveToStorage();\n  // Re-render the transactions\n  renderTransactions();\n}\n\n// export const editTransaction = (event, editionPanel, inputs, transaction, transactionAmount) => {\n//   // Return whether the form validation resulted in erros or not\n//   const errorsOccured = handleFormSubmit(event, inputs);\n//   // If there are no errors, edit the transaction\n//   if (!errorsOccured) {\n//     // Destructure the `inputs` array\n//     const [nameInput, amountInput, categorySelect] = inputs;\n//     // Return category icon based on selected category\n//     checkCategory(categorySelect);\n//     // // Get the old amount and turn it into a floating-point number\n//     const oldAmount = parseFloat(transactionAmount);\n//     // // Get the index of the old amount from `moneyArray`\n//     const oldAmountIndex = moneyArray.indexOf(oldAmount);\n//     // // Return the monetary value of the transaction\n//     const newAmountFormatted = formatCurrency(amountInput.value);\n//     // // Set the new transactions name and category icon\n//     transaction.querySelector(\".transactions__item-name\").innerHTML = `${categoryIcon} ${formatInputName(nameInput.value)}`;\n//     // Set the new transaction amount\n//     transaction.querySelector(\".transactions__item-amount-text\").innerHTML = `<i class=\"fa-solid fa-dollar-sign\"></i> ${newAmountFormatted}`;\n//     // Remove the classes that identify the transaction as an income or expense\n//     transaction.classList.remove(\"transactions__item--income\", \"transactions__item--expense\");\n//     // If the new amount is positive, turn the transaction into an income, otherwise turn it into an expense\n//     if (parseFloat(newAmountFormatted) > 0) {\n//       transaction.classList.remove(\"transactions__item--expense\");\n//       transaction.classList.add(\"transactions__item--income\");\n//     } else {\n//       transaction.classList.remove(\"transactions__item--income\");\n//       transaction.classList.add(\"transactions__item--expense\");\n//     }\n//     // Replace the old amount with the new amount\n//     moneyArray.splice(oldAmountIndex, 1, parseFloat(newAmountFormatted));\n//     // Recalculate the balance\n//     calculateBalance(moneyArray);\n//     // Close the panel\n//     closePanel(editionPanel, inputs);\n//   }\n// }\n\nexport const deleteAllTransactions = () => {\n  // Remove all transactions from `moneyArray`\n  moneyArray = [];\n  // Save the updated `moneyArray` to Local Storage\n  saveToStorage();\n  // Clear both incomesList and expensesList and balance info in `availableMoney`\n  clearStuff();\n  // Close the confirmation modal\n  confirmationModal.classList.remove(\"confirmation-modal--open\");\n}\n\nconst clearStuff = () => {\n  // Reset both incomesList and expensesList\n  incomesList.innerHTML = \"\";\n  expensesList.innerHTML = \"\";\n  // Reset textContent and classList of `availableMoney`\n  availableMoney.textContent = \"0\";\n  availableMoney.classList.remove(\"options__balance--positive\", \"options__balance--negative\");\n}","import setFooterYear from \"./footer.js\";\nimport {loadFromStorage, renderTransactions, createNewTransaction} from \"./data/transactions.js\";\nimport {openTransactionPanel, closePanel} from \"./panel/transaction_panel.js\";\nimport {openConfirmationModal, closeConfirmationModal} from \"./modal/modal.js\";\nimport {switchToDarkMode, switchToLightMode} from \"./utils/color_mode.js\";\n \n// Root element\nexport let rootElement; \n// Footer year\nexport let footerYear;\n// Wallet icon\nexport let walletIcon;\n// Balance info (how much money is available)\nexport let availableMoney;\n// Lists of transactions\nexport let incomesList;\nexport let expensesList;\n// Buttons for transactions\nlet addTransactionBtn; \nlet deleteAllBtn;\n// Light and dark mode buttons\nlet lightCircle;\nlet darkCircle;\n// Transaction creation panel\nexport let transactionPanel;\nexport let nameInput;\nexport let amountInput;\nexport let categorySelect;\nlet saveTransactionBtn;\nlet cancelCreationBtn;\nlet closePanelXmark;\n// Transaction edition panel\nexport let editionPanel;\nexport let nameToEditInput;\nexport let amountToEditInput;\nexport let categoryToEditSelect;\nlet cancelEditionBtn;\nlet closeEditionPanelXmark; \n// Confirmation modal\nexport let confirmationModal;\nlet cancelDeletionButton;\n// All inputs inside the transaction creation panel\nlet transactionPanelInputs;\nlet editionPanelInputs;\n\nconst main = () => {\n  getElements();\n  addEventListeners();\n  setFooterYear();\n  loadFromStorage();\n  renderTransactions();\n}\n\nconst getElements = () => {\n  // Root element\n  rootElement = document.documentElement;\n  // Footer year\n  footerYear = document.querySelector(\".footer__year\");\n  // Wallet icon\n  walletIcon = document.querySelector(\".header__title-icon\");\n  // Balance info\n  availableMoney = document.querySelector(\".options__balance > span\");\n  // Lists of transactions\n  incomesList = document.querySelector(\".incomes-box__list\");\n  expensesList = document.querySelector(\".expenses-box__list\");\n  // Buttons for transactions\n  addTransactionBtn = document.querySelector(\".options__controls-btn--add\");\n  deleteAllBtn = document.querySelector(\".options__controls-btn--deleteAll\");\n  // Light and dark mode buttons\n  lightCircle = document.querySelector(\".options__style-button--light\");\n  darkCircle = document.querySelector(\".options__style-button--dark\");\n  // Transaction creation panel\n  transactionPanel = document.querySelector(\".transaction-panel--create\");\n  nameInput = transactionPanel.querySelector(\"#name\");\n  amountInput = transactionPanel.querySelector(\"#amount\");\n  categorySelect = transactionPanel.querySelector(\"#category\");\n  saveTransactionBtn = transactionPanel.querySelector(\".transaction-panel__button--save\");\n  cancelCreationBtn = transactionPanel.querySelector(\".transaction-panel__button--cancel\");\n  closePanelXmark = transactionPanel.querySelector(\".transaction-panel__xmark\");\n  // Transaction edition panel\n  editionPanel = document.querySelector(\".transaction-panel--edit\");\n  nameToEditInput = editionPanel.querySelector(\"#name-to-edit\");\n  amountToEditInput = editionPanel.querySelector(\"#amount-to-edit\");\n  categoryToEditSelect = editionPanel.querySelector(\"#category-to-edit\");\n  cancelEditionBtn = editionPanel.querySelector(\".transaction-panel__button--cancel\");\n  closeEditionPanelXmark = editionPanel.querySelector(\".transaction-panel__xmark\"); \n  // Confirmation modal\n  confirmationModal = document.querySelector(\".confirmation-modal\");\n  cancelDeletionButton = document.querySelector(\".confirmation-modal__button--cancel\");\n\n  transactionPanelInputs = [nameInput, amountInput, categorySelect];\n  editionPanelInputs = [nameToEditInput, amountToEditInput, categoryToEditSelect];\n}\n\nconst addEventListeners = () => {\n  addTransactionBtn.addEventListener(\"click\", openTransactionPanel);\n  deleteAllBtn.addEventListener(\"click\", openConfirmationModal);\n  cancelDeletionButton.addEventListener(\"click\", closeConfirmationModal);\n  saveTransactionBtn.addEventListener(\"click\", (event) => createNewTransaction(event, transactionPanel, transactionPanelInputs));\n  cancelCreationBtn.addEventListener(\"click\", () => closePanel(transactionPanel, transactionPanelInputs));\n  cancelEditionBtn.addEventListener(\"click\", () => closePanel(editionPanel, editionPanelInputs));\n  closePanelXmark.addEventListener(\"click\", () => closePanel(transactionPanel, transactionPanelInputs));\n  closeEditionPanelXmark.addEventListener(\"click\", () => closePanel(editionPanel, editionPanelInputs));\n  lightCircle.addEventListener(\"click\", switchToLightMode); \n  darkCircle.addEventListener(\"click\", switchToDarkMode);\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", main);","import {availableMoney} from \"../main.js\";\r\n\r\nconst calculateBalance = (moneyArray) => {\r\n  // Calculate the sum of all the transaction amounts\r\n  let balance = moneyArray.reduce((accumulator, currentValue) => {\r\n    return accumulator + parseFloat(currentValue.amount);\r\n  }, 0);\r\n  // Round the balance to two decimal places and then convert it to a number\r\n  balance = parseFloat(balance.toFixed(2));\r\n  // Format the balance to a string\r\n  const formattedBalance = balance.toString();\r\n  // Set the balance in the DOM\r\n  availableMoney.textContent = formattedBalance;\r\n  // Remove the classes that identify the balance as positive or negative in case balance is 0\r\n  availableMoney.classList.remove(\"options__balance--positive\", \"options__balance--negative\");\r\n  // Otherwise add the class that identifies the balance as positive or negative\r\n  if (balance > 0) {\r\n    availableMoney.classList.add(\"options__balance--positive\");\r\n  } else if (balance < 0) {\r\n    availableMoney.classList.add(\"options__balance--negative\");\r\n  }\r\n}\r\n\r\nexport default calculateBalance;","import {confirmationModal} from \"../main.js\";\r\nimport {deleteAllTransactions} from \"../data/transactions.js\";\r\n\r\nexport const openConfirmationModal = () => {\r\n  confirmationModal.classList.add(\"confirmation-modal--open\");\r\n  confirmationModal.querySelector(\".confirmation-modal__button--confirm\").removeEventListener(\"click\", deleteAllTransactions);\r\n  confirmationModal.querySelector(\".confirmation-modal__button--confirm\").addEventListener(\"click\", deleteAllTransactions);\r\n}\r\n\r\nexport const closeConfirmationModal = () => {\r\n  confirmationModal.classList.remove(\"confirmation-modal--open\");\r\n}","import {rootElement, walletIcon} from \"../main.js\";\r\n\r\nexport const switchToLightMode = () => {\r\n  rootElement.style.setProperty(\"--darkColor\", \"#f0ebd8\");\r\n  rootElement.style.setProperty(\"--lightColor\", \"#0d1321\");\r\n  walletIcon.style.setProperty(\"stroke\", \"#0d1321\");\r\n}\r\n\r\nexport const switchToDarkMode = () => {\r\n  rootElement.style.setProperty(\"--darkColor\", \"#0d1321\");\r\n  rootElement.style.setProperty(\"--lightColor\", \"#f0ebd8\");\r\n  walletIcon.style.setProperty(\"stroke\", \"#f0ebd8\");\r\n};","import { footerYear } from \"./main.js\";\r\n\r\nconst setFooterYear = () => {\r\n  const now = new Date();\r\n  footerYear.textContent = now.getFullYear();\r\n}\r\n\r\nexport default setFooterYear;"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","currentEditTransaction","getCategoryIcon","selectedCategory","console","warn","concat","openTransactionPanel","transactionPanel","classList","add","querySelector","focus","closePanel","panel","inputs","forEach","input","value","remove","selectedIndex","clearInputs","closest","clearErrors","inputValue","trim","charAt","toUpperCase","slice","toLowerCase","displayError","formControl","errorMessage","error","textContent","removeError","event","preventDefault","_inputs","nameInput","amountInput","categorySelect","options","minLength","maxLength","length","formatInputName","id","checkName","amount","parseFloat","isNaN","startsWith","checkAmount","checkCategory","some","contains","checkForErrors","Math","round","toFixed","transactionId","index","moneyArray","findIndex","transaction","rootElement","footerYear","walletIcon","availableMoney","incomesList","expensesList","addTransactionBtn","deleteAllBtn","lightCircle","darkCircle","saveTransactionBtn","cancelCreationBtn","closePanelXmark","editionPanel","nameToEditInput","amountToEditInput","categoryToEditSelect","cancelEditionBtn","closeEditionPanelXmark","confirmationModal","cancelDeletionButton","transactionPanelInputs","editionPanelInputs","saveToStorage","localStorage","setItem","JSON","stringify","loadFromStorage","storedAmounts","getItem","parse","renderTransactions","clearStuff","listItem","document","createElement","transactionContainer","dataset","transactionElement","content","cloneNode","innerHTML","categoryIcon","name","addEventListener","log","transactionName","transactionAmount","transactionCategory","transactionIcon","getCategoryByIcon","removeEventListener","editTransaction","openEditionPanel","deleteTransaction","appendChild","balance","reduce","accumulator","currentValue","formattedBalance","toString","calculateBalance","handleFormSubmit","_inputs2","_slicedToArray","newNameFormatted","newCategoryIcon","newAmountFormatted","formatCurrency","oldTransactionIndex","getTransactionIndex","splice","matchingTransactionIndex","deleteAllTransactions","openConfirmationModal","closeConfirmationModal","switchToLightMode","style","setProperty","switchToDarkMode","now","documentElement","nameFormatted","amountFormatted","push","createNewTransaction","Date","getFullYear"],"sourceRoot":""}